{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null,\n      showEmoji: false,\n      processedMessageKeys: new Set(),\n      emojiList: ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇', '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩', '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣', '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬', '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗', '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯', '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐', '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈', '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾'],\n      wsConnected: false,\n      manualClosed: false,\n      notificationSound: null\n    };\n  },\n  mounted() {\n    // 确保用户信息存在\n    if (!this.user || !this.user.id) {\n      console.error('用户未登录');\n      this.$message.error('请先登录');\n      return;\n    }\n    console.log('当前用户信息:', this.user);\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n\n    // 初始化WebSocket连接\n    this.initWebSocket();\n\n    // 添加页面关闭事件监听\n    window.addEventListener('beforeunload', this.closeWebSocket);\n    document.addEventListener('click', this.closeEmojiPanel);\n\n    // 移除顶部导航栏的消息提示更新\n    this.$bus.$off('updateUnreadCount');\n\n    // 初始化提示音\n    this.notificationSound = new Audio('/notification.mp3');\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.closeWebSocket();\n    }\n    // 移除页面关闭事件监听\n    window.removeEventListener('beforeunload', this.closeWebSocket);\n    document.removeEventListener('click', this.closeEmojiPanel);\n    // 移除事件监听\n    this.$bus.$off('updateUnreadCount');\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n          // 不再触发顶部导航栏的未读消息更新\n        }\n      });\n    },\n\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.processedMessageKeys.clear();\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n      // 清除未读消息数\n      if (item.unreadCount) {\n        const index = this.userList.findIndex(u => u.chatUserId === item.chatUserId);\n        if (index !== -1) {\n          this.$set(this.userList[index], 'unreadCount', 0);\n        }\n      }\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          // 重置聊天列表\n          this.chatList = [];\n\n          // 添加历史消息，并记录消息ID\n          const messages = res.data || [];\n          messages.forEach(msg => {\n            this.chatList.push(msg);\n          });\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n\n      // 先关闭之前的连接\n      this.closeWebSocket();\n\n      // 从环境配置或window.location获取WebSocket服务器地址\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsPort = '9090'; // 使用固定的WebSocket端口\n      const wsUrl = `${protocol}//${window.location.hostname}:${wsPort}/chatServer/${this.user.id}`;\n      console.log('正在连接WebSocket:', wsUrl);\n      try {\n        this.ws = new WebSocket(wsUrl);\n        this.ws.onopen = () => {\n          console.log('WebSocket连接成功');\n          this.wsConnected = true; // 添加连接状态标记\n          this.$message.success('聊天服务已连接');\n          // 开始发送心跳\n          this.startHeartbeat();\n        };\n        this.ws.onclose = e => {\n          console.log('WebSocket连接关闭', e);\n          this.wsConnected = false;\n          // 清除心跳定时器\n          if (this.heartbeatTimer) {\n            clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = null;\n          }\n\n          // 如果不是主动关闭的，则尝试重连\n          if (!this.manualClosed) {\n            console.log('WebSocket连接断开，3秒后尝试重连...');\n            setTimeout(() => {\n              if (!this.wsConnected && !this.manualClosed) {\n                this.initWebSocket();\n              }\n            }, 3000);\n          }\n        };\n        this.ws.onerror = e => {\n          console.error('WebSocket连接错误:', e);\n          this.wsConnected = false;\n          this.$message.error('聊天服务连接失败，正在重试...');\n        };\n        this.ws.onmessage = this.onMessage;\n      } catch (error) {\n        console.error('创建WebSocket连接失败:', error);\n        this.$message.error('连接聊天服务失败');\n        this.wsConnected = false;\n      }\n    },\n    closeWebSocket() {\n      this.manualClosed = true; // 标记为主动关闭\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = null;\n      }\n      if (this.ws) {\n        try {\n          this.ws.close();\n        } catch (e) {\n          console.error('关闭WebSocket连接出错:', e);\n        }\n        this.ws = null;\n      }\n      this.wsConnected = false;\n    },\n    startHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n      }\n\n      // 每30秒发送一次心跳\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          try {\n            const heartbeat = {\n              type: 'heartbeat',\n              userId: this.user.id,\n              timestamp: new Date().getTime()\n            };\n            this.ws.send(JSON.stringify(heartbeat));\n          } catch (error) {\n            console.error('发送心跳消息失败:', error);\n            // 如果发送心跳失败，可能连接已断开，尝试重连\n            this.wsConnected = false;\n            this.closeWebSocket();\n            this.manualClosed = false; // 重置手动关闭标记\n            this.initWebSocket();\n          }\n        }\n      }, 30000);\n    },\n    send() {\n      if (!this.content.trim()) return;\n\n      // 检查WebSocket连接状态\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        console.log('WebSocket未连接，尝试重新连接...');\n        this.$message.warning('正在重新连接服务器...');\n        this.initWebSocket();\n        setTimeout(() => {\n          this.send();\n        }, 1000);\n        return;\n      }\n      const tempMsg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        contentType: 'text',\n        fileType: null,\n        fileUrl: null,\n        userName: this.user.name,\n        userAvatar: this.user.avatar,\n        timestamp: new Date().getTime(),\n        pending: true\n      };\n\n      // 先添加到本地聊天列表\n      const msgIndex = this.chatList.length;\n      this.$set(this.chatList, msgIndex, tempMsg);\n\n      // 清空输入框并滚动到底部\n      this.content = '';\n      this.$nextTick(() => {\n        const box = this.$refs.chatBox;\n        if (box) box.scrollTop = box.scrollHeight;\n      });\n\n      // 发送WebSocket消息\n      const wsMessage = {\n        type: 'chat',\n        fromUserId: this.user.id,\n        fromUserName: this.user.name,\n        fromUserAvatar: this.user.avatar,\n        toUserId: this.active,\n        content: tempMsg.text,\n        contentType: 'text',\n        timestamp: tempMsg.timestamp,\n        needSave: true\n      };\n      try {\n        this.ws.send(JSON.stringify(wsMessage));\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        this.$set(this.chatList[msgIndex], 'error', true);\n        this.$message.error('发送失败，请重试');\n      }\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmoji = false;\n    },\n    closeEmojiPanel(e) {\n      const emojiTool = document.querySelector('.emoji-tool');\n      if (emojiTool && !emojiTool.contains(e.target)) {\n        this.showEmoji = false;\n      }\n    },\n    handleImageSuccess(response, file) {\n      if (response.code === '200') {\n        const tempMsg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'image',\n          fileType: 'image',\n          fileUrl: response.data,\n          userName: this.user.name,\n          userAvatar: this.user.avatar,\n          timestamp: new Date().getTime(),\n          pending: true\n        };\n\n        // 添加到本地聊天列表\n        const msgIndex = this.chatList.length;\n        this.$set(this.chatList, msgIndex, tempMsg);\n\n        // 通过WebSocket发送消息\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          const wsMessage = {\n            type: 'chat',\n            fromUserId: this.user.id,\n            fromUserName: this.user.name,\n            fromUserAvatar: this.user.avatar,\n            toUserId: this.active,\n            content: response.data,\n            contentType: 'image',\n            fileType: 'image',\n            fileUrl: response.data,\n            timestamp: tempMsg.timestamp,\n            needSave: true // 标记需要保存到数据库\n          };\n\n          try {\n            this.ws.send(JSON.stringify(wsMessage));\n          } catch (error) {\n            console.error('发送图片消息失败:', error);\n            this.$set(this.chatList[msgIndex], 'error', true);\n            this.$message.error('发送失败，请重试');\n          }\n        } else {\n          this.$set(this.chatList[msgIndex], 'error', true);\n          this.$message.error('发送失败，WebSocket未连接');\n        }\n      }\n    },\n    handleFileSuccess(response, file) {\n      if (response.code === '200') {\n        const tempMsg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'file',\n          fileType: file.type || 'unknown',\n          fileUrl: response.data,\n          fileName: file.name,\n          userName: this.user.name,\n          userAvatar: this.user.avatar,\n          timestamp: new Date().getTime(),\n          pending: true\n        };\n\n        // 添加到本地聊天列表\n        const msgIndex = this.chatList.length;\n        this.$set(this.chatList, msgIndex, tempMsg);\n\n        // 通过WebSocket发送消息\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          const wsMessage = {\n            type: 'chat',\n            fromUserId: this.user.id,\n            fromUserName: this.user.name,\n            fromUserAvatar: this.user.avatar,\n            toUserId: this.active,\n            content: response.data,\n            contentType: 'file',\n            fileType: file.type || 'unknown',\n            fileUrl: response.data,\n            fileName: file.name,\n            timestamp: tempMsg.timestamp,\n            needSave: true // 标记需要保存到数据库\n          };\n\n          try {\n            this.ws.send(JSON.stringify(wsMessage));\n          } catch (error) {\n            console.error('发送文件消息失败:', error);\n            this.$set(this.chatList[msgIndex], 'error', true);\n            this.$message.error('发送失败，请重试');\n          }\n        } else {\n          this.$set(this.chatList[msgIndex], 'error', true);\n          this.$message.error('发送失败，WebSocket未连接');\n        }\n      }\n    },\n    previewImage(imageUrl) {\n      // 实现图片预览逻辑\n    },\n    updateUnreadCount(fromUserId) {\n      // 只更新聊天列表中的未读消息数\n      const userIndex = this.userList.findIndex(u => u.chatUserId === fromUserId);\n      if (userIndex !== -1) {\n        const currentCount = this.userList[userIndex].unreadCount || 0;\n        this.$set(this.userList[userIndex], 'unreadCount', currentCount + 1);\n      }\n    },\n    onMessage(e) {\n      try {\n        const data = JSON.parse(e.data);\n        console.log('收到WebSocket消息:', data);\n        if (data.type === 'chat') {\n          // 检查消息是否有效\n          if (!data.fromUserId || !data.toUserId) {\n            console.error('无效的消息格式:', data);\n            return;\n          }\n\n          // 如果是接收到的消息且不是当前聊天对象，播放提示音并显示通知\n          if (data.toUserId === this.user.id && data.fromUserId !== this.active) {\n            this.updateUnreadCount(data.fromUserId);\n\n            // 播放提示音\n            if (this.notificationSound) {\n              this.notificationSound.play().catch(err => console.log('播放提示音失败:', err));\n            }\n\n            // 显示桌面通知\n            if (Notification.permission === 'granted') {\n              const notification = new Notification('新消息提醒', {\n                body: `${data.fromUserName}: ${data.content}`,\n                icon: data.fromUserAvatar,\n                tag: 'chat-message'\n              });\n              notification.onclick = () => {\n                window.focus();\n                this.changeChatUser(this.userList.find(u => u.chatUserId === data.fromUserId));\n              };\n            }\n            // 显示Element UI通知\n            this.$notify({\n              title: '新消息',\n              message: `${data.fromUserName}: ${data.content}`,\n              type: 'success',\n              position: 'bottom-right',\n              duration: 3000,\n              onClick: () => {\n                this.changeChatUser(this.userList.find(u => u.chatUserId === data.fromUserId));\n              }\n            });\n          }\n\n          // 生成消息的唯一标识\n          const messageKey = `${data.fromUserId}-${data.toUserId}-${data.timestamp}`;\n\n          // 检查消息是否已经处理过\n          if (this.processedMessageKeys.has(messageKey)) {\n            console.log('消息已处理，跳过:', messageKey);\n            return;\n          }\n\n          // 记录消息已处理\n          this.processedMessageKeys.add(messageKey);\n\n          // 如果是当前聊天对象的消息\n          if (data.fromUserId === this.active && data.toUserId === this.user.id || data.toUserId === this.active && data.fromUserId === this.user.id) {\n            // 如果是发送方收到服务器的确认消息\n            if (data.messageId && data.fromUserId === this.user.id) {\n              // 查找并更新对应的临时消息\n              const msgIndex = this.chatList.findIndex(msg => msg.pending && msg.timestamp === data.timestamp && msg.userId === data.fromUserId);\n              if (msgIndex !== -1) {\n                this.$set(this.chatList[msgIndex], 'id', data.messageId);\n                this.$set(this.chatList[msgIndex], 'pending', false);\n                return;\n              }\n            }\n\n            // 处理接收到的新消息\n            const newMsg = {\n              id: data.messageId,\n              userId: data.fromUserId,\n              chatUserId: data.toUserId,\n              text: data.content,\n              contentType: data.contentType || 'text',\n              fileType: data.fileType,\n              fileUrl: data.fileUrl,\n              fileName: data.fileName,\n              userName: data.fromUserName,\n              userAvatar: data.fromUserAvatar,\n              timestamp: data.timestamp\n            };\n\n            // 检查是否已经存在相同的消息\n            const existingMsgIndex = this.chatList.findIndex(msg => msg.timestamp === data.timestamp && msg.userId === data.fromUserId && msg.text === data.content);\n            if (existingMsgIndex === -1) {\n              // 只有不存在相同消息时才添加\n              this.$set(this.chatList, this.chatList.length, newMsg);\n\n              // 如果是收到的消息，标记为已读并发送确认\n              if (data.toUserId === this.user.id) {\n                this.$request.put(`/chatInfo/updateRead/${data.fromUserId}`);\n                // 发送消息确认\n                if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                  const ack = {\n                    type: 'ack',\n                    messageId: data.messageId,\n                    status: 'received',\n                    timestamp: new Date().getTime()\n                  };\n                  this.ws.send(JSON.stringify(ack));\n                }\n              }\n              this.$nextTick(() => {\n                const box = this.$refs.chatBox;\n                if (box) box.scrollTop = box.scrollHeight;\n              });\n            } else {\n              console.log('跳过重复消息:', data);\n            }\n          }\n          // 刷新聊天列表\n          this.loadUserList();\n        } else if (data.type === 'ack') {\n          // 处理消息确认\n          console.log('收到消息确认:', data);\n          if (data.status === 'error') {\n            // 查找并标记发送失败的消息\n            const msgIndex = this.chatList.findIndex(msg => msg.pending && msg.timestamp === data.timestamp);\n            if (msgIndex !== -1) {\n              this.$set(this.chatList[msgIndex], 'error', true);\n              this.$message.error(data.error || '消息发送失败');\n            }\n          } else if (data.status === 'success') {\n            console.log('消息发送成功:', data.messageId);\n          }\n        }\n      } catch (error) {\n        console.error('解析WebSocket消息失败:', error, e.data);\n      }\n    },\n    // 请求桌面通知权限\n    requestNotificationPermission() {\n      if (Notification && Notification.permission !== 'granted') {\n        Notification.requestPermission();\n      }\n    }\n  },\n  created() {\n    this.requestNotificationPermission();\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","userList","chatList","chatTitle","active","content","activeUserAvatar","ws","showEmoji","processedMessageKeys","Set","emojiList","wsConnected","manualClosed","notificationSound","mounted","id","console","error","$message","log","loadUserList","then","toUserId","$route","query","target","find","u","chatUserId","changeChatUser","$request","post","userId","added","initWebSocket","window","addEventListener","closeWebSocket","document","closeEmojiPanel","$bus","$off","Audio","beforeDestroy","removeEventListener","methods","get","res","code","item","chatUserName","chatUserAvatar","clear","put","loadChatRecord","unreadCount","index","findIndex","$set","messages","forEach","msg","push","$nextTick","box","$refs","chatBox","scrollTop","scrollHeight","WebSocket","protocol","location","wsPort","wsUrl","hostname","onopen","success","startHeartbeat","onclose","e","heartbeatTimer","clearInterval","setTimeout","onerror","onmessage","onMessage","close","setInterval","readyState","OPEN","heartbeat","type","timestamp","Date","getTime","send","stringify","trim","warning","tempMsg","text","contentType","fileType","fileUrl","userName","name","userAvatar","avatar","pending","msgIndex","length","wsMessage","fromUserId","fromUserName","fromUserAvatar","needSave","insertEmoji","emoji","emojiTool","querySelector","contains","handleImageSuccess","response","file","handleFileSuccess","fileName","previewImage","imageUrl","updateUnreadCount","userIndex","currentCount","play","catch","err","Notification","permission","notification","body","icon","tag","onclick","focus","$notify","title","message","position","duration","onClick","messageKey","has","add","messageId","newMsg","existingMsgIndex","ack","status","requestNotificationPermission","requestPermission","created"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <div class=\"chat-user-list\">\n      <div\n        v-for=\"item in userList\"\n        :key=\"item.chatUserId\"\n        :class=\"['chat-user', item.chatUserId === active ? 'active' : '']\"\n        @click=\"changeChatUser(item)\">\n        <div class=\"user-avatar\">\n          <img :src=\"item.chatUserAvatar\" alt=\"\">\n        </div>\n        <div class=\"user-info\">\n          <div class=\"user-name\">{{ item.chatUserName }}</div>\n          <div class=\"last-msg\">{{ item.lastMessage }}</div>\n          <span v-if=\"item.unreadCount\" class=\"chat-unread-count\">{{ item.unreadCount }}</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-main\" v-if=\"active\">\n      <div class=\"chat-header\">\n        <div class=\"chat-title\">\n          <img :src=\"activeUserAvatar\" alt=\"\" class=\"title-avatar\">\n          <span>{{ chatTitle }}</span>\n        </div>\n        <div class=\"chat-actions\">\n          <i class=\"el-icon-more\"></i>\n        </div>\n      </div>\n\n      <div class=\"chat-box\" ref=\"chatBox\">\n        <div\n          v-for=\"(item, index) in chatList\"\n          :key=\"index\"\n          :class=\"['msg-box', item.userId === user.id ? 'right' : 'left']\">\n          <img\n            class=\"avatar\"\n            :src=\"item.userId === user.id ? user.avatar : activeUserAvatar\"\n            alt=\"头像\">\n          <div class=\"msg-content\">\n            <div class=\"msg-text\" v-if=\"!item.contentType || item.contentType === 'text'\">{{ item.text }}</div>\n            <div class=\"msg-image\" v-else-if=\"item.contentType === 'image'\" @click=\"previewImage(item.text)\">\n              <el-image \n                :src=\"item.text\" \n                :preview-src-list=\"[item.text]\"\n                fit=\"cover\">\n              </el-image>\n            </div>\n            <div class=\"msg-file\" v-else-if=\"item.contentType === 'file'\">\n              <i class=\"el-icon-document\"></i>\n              <span class=\"file-name\">{{ item.fileName || '文件' }}</span>\n              <a :href=\"item.text\" target=\"_blank\" class=\"download-btn\">下载</a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <div class=\"input-tools\">\n          <div class=\"emoji-tool\">\n            <i class=\"el-icon-sunny\" @click=\"showEmoji = !showEmoji\"></i>\n            <div class=\"emoji-panel\" v-show=\"showEmoji\">\n              <div class=\"emoji-list\">\n                <span\n                  v-for=\"(emoji, index) in emojiList\"\n                  :key=\"index\"\n                  @click=\"insertEmoji(emoji)\"\n                  class=\"emoji-item\"\n                >{{ emoji }}</span>\n              </div>\n            </div>\n          </div>\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"$baseUrl + '/files/upload'\"\n            :headers=\"{ token: user.token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleImageSuccess\"\n            accept=\"image/*\">\n            <i class=\"el-icon-picture-outline\"></i>\n          </el-upload>\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"$baseUrl + '/files/upload'\"\n            :headers=\"{ token: user.token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleFileSuccess\"\n            accept=\"*\">\n            <i class=\"el-icon-folder\"></i>\n          </el-upload>\n        </div>\n        <div class=\"input-box\">\n          <el-input\n            v-model=\"content\"\n            type=\"textarea\"\n            :rows=\"3\"\n            placeholder=\"请输入聊天内容\"\n            @keyup.enter.native=\"send\"\n            resize=\"none\">\n          </el-input>\n          <el-button type=\"primary\" class=\"send-btn\" @click=\"send\">发送</el-button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-welcome\" v-else>\n      <div class=\"welcome-content\">\n        <i class=\"el-icon-chat-line-round\"></i>\n        <p>选择一个联系人开始聊天</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null,\n      showEmoji: false,\n      processedMessageKeys: new Set(),\n      emojiList: [\n        '😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇',\n        '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚',\n        '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩',\n        '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣',\n        '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬',\n        '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗',\n        '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯',\n        '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐',\n        '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈',\n        '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾'\n      ],\n      wsConnected: false,\n      manualClosed: false,\n      notificationSound: null,\n    }\n  },\n  mounted() {\n    // 确保用户信息存在\n    if (!this.user || !this.user.id) {\n      console.error('用户未登录');\n      this.$message.error('请先登录');\n      return;\n    }\n\n    console.log('当前用户信息:', this.user);\n    \n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n\n    // 初始化WebSocket连接\n    this.initWebSocket();\n    \n    // 添加页面关闭事件监听\n    window.addEventListener('beforeunload', this.closeWebSocket);\n    document.addEventListener('click', this.closeEmojiPanel);\n\n    // 移除顶部导航栏的消息提示更新\n    this.$bus.$off('updateUnreadCount');\n\n    // 初始化提示音\n    this.notificationSound = new Audio('/notification.mp3');\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.closeWebSocket();\n    }\n    // 移除页面关闭事件监听\n    window.removeEventListener('beforeunload', this.closeWebSocket);\n    document.removeEventListener('click', this.closeEmojiPanel);\n    // 移除事件监听\n    this.$bus.$off('updateUnreadCount');\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n          // 不再触发顶部导航栏的未读消息更新\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.processedMessageKeys.clear();\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n      // 清除未读消息数\n      if (item.unreadCount) {\n        const index = this.userList.findIndex(u => u.chatUserId === item.chatUserId);\n        if (index !== -1) {\n          this.$set(this.userList[index], 'unreadCount', 0);\n        }\n      }\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          // 重置聊天列表\n          this.chatList = [];\n          \n          // 添加历史消息，并记录消息ID\n          const messages = res.data || [];\n          messages.forEach(msg => {\n            this.chatList.push(msg);\n          });\n\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      \n      // 先关闭之前的连接\n      this.closeWebSocket();\n      \n      // 从环境配置或window.location获取WebSocket服务器地址\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsPort = '9090'; // 使用固定的WebSocket端口\n      const wsUrl = `${protocol}//${window.location.hostname}:${wsPort}/chatServer/${this.user.id}`;\n      \n      console.log('正在连接WebSocket:', wsUrl);\n      \n      try {\n        this.ws = new WebSocket(wsUrl);\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket连接成功');\n          this.wsConnected = true; // 添加连接状态标记\n          this.$message.success('聊天服务已连接');\n          // 开始发送心跳\n          this.startHeartbeat();\n        };\n        \n        this.ws.onclose = (e) => {\n          console.log('WebSocket连接关闭', e);\n          this.wsConnected = false;\n          // 清除心跳定时器\n          if (this.heartbeatTimer) {\n            clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = null;\n          }\n          \n          // 如果不是主动关闭的，则尝试重连\n          if (!this.manualClosed) {\n            console.log('WebSocket连接断开，3秒后尝试重连...');\n            setTimeout(() => {\n              if (!this.wsConnected && !this.manualClosed) {\n                this.initWebSocket();\n              }\n            }, 3000);\n          }\n        };\n        \n        this.ws.onerror = (e) => {\n          console.error('WebSocket连接错误:', e);\n          this.wsConnected = false;\n          this.$message.error('聊天服务连接失败，正在重试...');\n        };\n        \n        this.ws.onmessage = this.onMessage;\n        \n      } catch (error) {\n        console.error('创建WebSocket连接失败:', error);\n        this.$message.error('连接聊天服务失败');\n        this.wsConnected = false;\n      }\n    },\n    closeWebSocket() {\n      this.manualClosed = true; // 标记为主动关闭\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = null;\n      }\n      if (this.ws) {\n        try {\n          this.ws.close();\n        } catch (e) {\n          console.error('关闭WebSocket连接出错:', e);\n        }\n        this.ws = null;\n      }\n      this.wsConnected = false;\n    },\n    startHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n      }\n      \n      // 每30秒发送一次心跳\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          try {\n            const heartbeat = {\n              type: 'heartbeat',\n              userId: this.user.id,\n              timestamp: new Date().getTime()\n            };\n            this.ws.send(JSON.stringify(heartbeat));\n          } catch (error) {\n            console.error('发送心跳消息失败:', error);\n            // 如果发送心跳失败，可能连接已断开，尝试重连\n            this.wsConnected = false;\n            this.closeWebSocket();\n            this.manualClosed = false; // 重置手动关闭标记\n            this.initWebSocket();\n          }\n        }\n      }, 30000);\n    },\n    send() {\n      if (!this.content.trim()) return;\n      \n      // 检查WebSocket连接状态\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        console.log('WebSocket未连接，尝试重新连接...');\n        this.$message.warning('正在重新连接服务器...');\n        this.initWebSocket();\n        setTimeout(() => {\n          this.send();\n        }, 1000);\n        return;\n      }\n\n      const tempMsg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        contentType: 'text',\n        fileType: null,\n        fileUrl: null,\n        userName: this.user.name,\n        userAvatar: this.user.avatar,\n        timestamp: new Date().getTime(),\n        pending: true\n      };\n\n      // 先添加到本地聊天列表\n      const msgIndex = this.chatList.length;\n      this.$set(this.chatList, msgIndex, tempMsg);\n\n      // 清空输入框并滚动到底部\n      this.content = '';\n      this.$nextTick(() => {\n        const box = this.$refs.chatBox;\n        if (box) box.scrollTop = box.scrollHeight;\n      });\n\n      // 发送WebSocket消息\n      const wsMessage = {\n        type: 'chat',\n        fromUserId: this.user.id,\n        fromUserName: this.user.name,\n        fromUserAvatar: this.user.avatar,\n        toUserId: this.active,\n        content: tempMsg.text,\n        contentType: 'text',\n        timestamp: tempMsg.timestamp,\n        needSave: true\n      };\n\n      try {\n        this.ws.send(JSON.stringify(wsMessage));\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        this.$set(this.chatList[msgIndex], 'error', true);\n        this.$message.error('发送失败，请重试');\n      }\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmoji = false;\n    },\n    closeEmojiPanel(e) {\n      const emojiTool = document.querySelector('.emoji-tool');\n      if (emojiTool && !emojiTool.contains(e.target)) {\n        this.showEmoji = false;\n      }\n    },\n    handleImageSuccess(response, file) {\n      if (response.code === '200') {\n        const tempMsg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'image',\n          fileType: 'image',\n          fileUrl: response.data,\n          userName: this.user.name,\n          userAvatar: this.user.avatar,\n          timestamp: new Date().getTime(),\n          pending: true\n        };\n\n        // 添加到本地聊天列表\n        const msgIndex = this.chatList.length;\n        this.$set(this.chatList, msgIndex, tempMsg);\n\n        // 通过WebSocket发送消息\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          const wsMessage = {\n            type: 'chat',\n            fromUserId: this.user.id,\n            fromUserName: this.user.name,\n            fromUserAvatar: this.user.avatar,\n            toUserId: this.active,\n            content: response.data,\n            contentType: 'image',\n            fileType: 'image',\n            fileUrl: response.data,\n            timestamp: tempMsg.timestamp,\n            needSave: true // 标记需要保存到数据库\n          };\n          \n          try {\n            this.ws.send(JSON.stringify(wsMessage));\n          } catch (error) {\n            console.error('发送图片消息失败:', error);\n            this.$set(this.chatList[msgIndex], 'error', true);\n            this.$message.error('发送失败，请重试');\n          }\n        } else {\n          this.$set(this.chatList[msgIndex], 'error', true);\n          this.$message.error('发送失败，WebSocket未连接');\n        }\n      }\n    },\n    handleFileSuccess(response, file) {\n      if (response.code === '200') {\n        const tempMsg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'file',\n          fileType: file.type || 'unknown',\n          fileUrl: response.data,\n          fileName: file.name,\n          userName: this.user.name,\n          userAvatar: this.user.avatar,\n          timestamp: new Date().getTime(),\n          pending: true\n        };\n\n        // 添加到本地聊天列表\n        const msgIndex = this.chatList.length;\n        this.$set(this.chatList, msgIndex, tempMsg);\n\n        // 通过WebSocket发送消息\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          const wsMessage = {\n            type: 'chat',\n            fromUserId: this.user.id,\n            fromUserName: this.user.name,\n            fromUserAvatar: this.user.avatar,\n            toUserId: this.active,\n            content: response.data,\n            contentType: 'file',\n            fileType: file.type || 'unknown',\n            fileUrl: response.data,\n            fileName: file.name,\n            timestamp: tempMsg.timestamp,\n            needSave: true // 标记需要保存到数据库\n          };\n          \n          try {\n            this.ws.send(JSON.stringify(wsMessage));\n          } catch (error) {\n            console.error('发送文件消息失败:', error);\n            this.$set(this.chatList[msgIndex], 'error', true);\n            this.$message.error('发送失败，请重试');\n          }\n        } else {\n          this.$set(this.chatList[msgIndex], 'error', true);\n          this.$message.error('发送失败，WebSocket未连接');\n        }\n      }\n    },\n    previewImage(imageUrl) {\n      // 实现图片预览逻辑\n    },\n    updateUnreadCount(fromUserId) {\n      // 只更新聊天列表中的未读消息数\n      const userIndex = this.userList.findIndex(u => u.chatUserId === fromUserId);\n      if (userIndex !== -1) {\n        const currentCount = this.userList[userIndex].unreadCount || 0;\n        this.$set(this.userList[userIndex], 'unreadCount', currentCount + 1);\n      }\n    },\n    onMessage(e) {\n      try {\n        const data = JSON.parse(e.data);\n        console.log('收到WebSocket消息:', data);\n        \n        if (data.type === 'chat') {\n          // 检查消息是否有效\n          if (!data.fromUserId || !data.toUserId) {\n            console.error('无效的消息格式:', data);\n            return;\n          }\n\n          // 如果是接收到的消息且不是当前聊天对象，播放提示音并显示通知\n          if (data.toUserId === this.user.id && data.fromUserId !== this.active) {\n            this.updateUnreadCount(data.fromUserId);\n            \n            // 播放提示音\n            if (this.notificationSound) {\n              this.notificationSound.play().catch(err => console.log('播放提示音失败:', err));\n            }\n\n            // 显示桌面通知\n            if (Notification.permission === 'granted') {\n              const notification = new Notification('新消息提醒', {\n                body: `${data.fromUserName}: ${data.content}`,\n                icon: data.fromUserAvatar,\n                tag: 'chat-message'\n              });\n              \n              notification.onclick = () => {\n                window.focus();\n                this.changeChatUser(this.userList.find(u => u.chatUserId === data.fromUserId));\n              };\n            }\n            // 显示Element UI通知\n            this.$notify({\n              title: '新消息',\n              message: `${data.fromUserName}: ${data.content}`,\n              type: 'success',\n              position: 'bottom-right',\n              duration: 3000,\n              onClick: () => {\n                this.changeChatUser(this.userList.find(u => u.chatUserId === data.fromUserId));\n              }\n            });\n          }\n\n          // 生成消息的唯一标识\n          const messageKey = `${data.fromUserId}-${data.toUserId}-${data.timestamp}`;\n          \n          // 检查消息是否已经处理过\n          if (this.processedMessageKeys.has(messageKey)) {\n            console.log('消息已处理，跳过:', messageKey);\n            return;\n          }\n          \n          // 记录消息已处理\n          this.processedMessageKeys.add(messageKey);\n\n          // 如果是当前聊天对象的消息\n          if ((data.fromUserId === this.active && data.toUserId === this.user.id) || \n              (data.toUserId === this.active && data.fromUserId === this.user.id)) {\n            \n            // 如果是发送方收到服务器的确认消息\n            if (data.messageId && data.fromUserId === this.user.id) {\n              // 查找并更新对应的临时消息\n              const msgIndex = this.chatList.findIndex(msg => \n                msg.pending && \n                msg.timestamp === data.timestamp && \n                msg.userId === data.fromUserId\n              );\n              \n              if (msgIndex !== -1) {\n                this.$set(this.chatList[msgIndex], 'id', data.messageId);\n                this.$set(this.chatList[msgIndex], 'pending', false);\n                return;\n              }\n            }\n\n            // 处理接收到的新消息\n            const newMsg = {\n              id: data.messageId,\n              userId: data.fromUserId,\n              chatUserId: data.toUserId,\n              text: data.content,\n              contentType: data.contentType || 'text',\n              fileType: data.fileType,\n              fileUrl: data.fileUrl,\n              fileName: data.fileName,\n              userName: data.fromUserName,\n              userAvatar: data.fromUserAvatar,\n              timestamp: data.timestamp\n            };\n\n            // 检查是否已经存在相同的消息\n            const existingMsgIndex = this.chatList.findIndex(msg => \n              msg.timestamp === data.timestamp && \n              msg.userId === data.fromUserId &&\n              msg.text === data.content\n            );\n\n            if (existingMsgIndex === -1) {\n              // 只有不存在相同消息时才添加\n              this.$set(this.chatList, this.chatList.length, newMsg);\n              \n              // 如果是收到的消息，标记为已读并发送确认\n              if (data.toUserId === this.user.id) {\n                this.$request.put(`/chatInfo/updateRead/${data.fromUserId}`);\n                // 发送消息确认\n                if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                  const ack = {\n                    type: 'ack',\n                    messageId: data.messageId,\n                    status: 'received',\n                    timestamp: new Date().getTime()\n                  };\n                  this.ws.send(JSON.stringify(ack));\n                }\n              }\n              \n              this.$nextTick(() => {\n                const box = this.$refs.chatBox;\n                if (box) box.scrollTop = box.scrollHeight;\n              });\n            } else {\n              console.log('跳过重复消息:', data);\n            }\n          }\n          // 刷新聊天列表\n          this.loadUserList();\n        } else if (data.type === 'ack') {\n          // 处理消息确认\n          console.log('收到消息确认:', data);\n          if (data.status === 'error') {\n            // 查找并标记发送失败的消息\n            const msgIndex = this.chatList.findIndex(msg => \n              msg.pending && \n              msg.timestamp === data.timestamp\n            );\n            if (msgIndex !== -1) {\n              this.$set(this.chatList[msgIndex], 'error', true);\n              this.$message.error(data.error || '消息发送失败');\n            }\n          } else if (data.status === 'success') {\n            console.log('消息发送成功:', data.messageId);\n          }\n        }\n      } catch (error) {\n        console.error('解析WebSocket消息失败:', error, e.data);\n      }\n    },\n    // 请求桌面通知权限\n    requestNotificationPermission() {\n      if (Notification && Notification.permission !== 'granted') {\n        Notification.requestPermission();\n      }\n    }\n  },\n  created() {\n    this.requestNotificationPermission();\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  height: 85vh;\n  background: #f5f5f5;\n  margin: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.chat-user-list {\n  width: 280px;\n  background: #f5f5f5;\n  border-right: 1px solid #e6e6e6;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-user {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  cursor: pointer;\n  position: relative;\n}\n\n.chat-user:hover,\n.chat-user.active {\n  background-color: #e6e6e6;\n}\n\n.user-avatar {\n  position: relative;\n  margin-right: 12px;\n}\n\n.user-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n}\n\n.user-info {\n  flex: 1;\n  min-width: 0;\n  position: relative;\n}\n\n.user-name {\n  font-size: 14px;\n  color: #333;\n  margin-bottom: 4px;\n  padding-right: 30px;\n}\n\n.last-msg {\n  font-size: 12px;\n  color: #999;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.unread-badge {\n  position: absolute;\n  background-color: #ff4d4f;\n  color: white;\n  font-size: 12px;\n  padding: 0 6px;\n  height: 18px;\n  min-width: 18px;\n  border-radius: 9px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 6px rgba(255, 77, 79, 0.4);\n  animation: badge-pop 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n@keyframes badge-pop {\n  from {\n    transform: scale(0);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n/* 修改聊天列表中的未读消息提示 */\n.chat-unread-count {\n  position: absolute;\n  right: 5px;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: #ff4d4f;\n  color: white;\n  font-size: 12px;\n  padding: 0 6px;\n  height: 18px;\n  min-width: 18px;\n  border-radius: 9px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 6px rgba(255, 77, 79, 0.4);\n  animation: badge-pop 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: #f5f5f5;\n}\n\n.chat-header {\n  height: 60px;\n  background: #f5f5f5;\n  border-bottom: 1px solid #e6e6e6;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px;\n}\n\n.chat-title {\n  display: flex;\n  align-items: center;\n}\n\n.title-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.chat-actions {\n  color: #666;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n.chat-box {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background: #f5f5f5;\n}\n\n.msg-box {\n  display: flex;\n  margin-bottom: 20px;\n}\n\n.msg-box.left {\n  flex-direction: row;\n}\n\n.msg-box.right {\n  flex-direction: row-reverse;\n}\n\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  margin: 0 10px;\n}\n\n.msg-content {\n  max-width: 60%;\n}\n\n.msg-text {\n  background: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  word-break: break-all;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  white-space: pre-wrap;\n}\n\n.msg-box.right .msg-text {\n  background: #95ec69;\n}\n\n.chat-input {\n  background: #f5f5f5;\n  border-top: 1px solid #e6e6e6;\n  padding: 10px;\n}\n\n.input-tools {\n  display: flex;\n  padding: 5px 0;\n}\n\n.input-tools i {\n  font-size: 20px;\n  color: #666;\n  margin-right: 15px;\n  cursor: pointer;\n}\n\n.input-box {\n  margin: 5px 0;\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  gap: 10px;\n}\n\n.input-box .el-textarea {\n  flex: 1;\n}\n\n.send-btn {\n  height: 65px;\n  padding: 0 20px;\n}\n\n.input-actions {\n  display: none;\n}\n\n.chat-welcome {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #f5f5f5;\n  border-left: 1px solid #e6e6e6;\n}\n\n.welcome-content {\n  text-align: center;\n  color: #909399;\n}\n\n.welcome-content i {\n  font-size: 80px;\n  margin-bottom: 20px;\n}\n\n.welcome-content p {\n  font-size: 16px;\n  margin: 0;\n}\n\n.emoji-tool {\n  position: relative;\n  display: inline-block;\n}\n\n.emoji-panel {\n  position: absolute;\n  bottom: 40px;\n  left: 0;\n  width: 360px;\n  height: 200px;\n  background: white;\n  border: 1px solid #e6e6e6;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n  padding: 10px;\n  z-index: 1000;\n}\n\n.emoji-list {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 5px;\n  height: 100%;\n  overflow-y: auto;\n}\n\n.emoji-item {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px;\n  transition: all 0.3s;\n}\n\n.emoji-item:hover {\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n/* 自定义滚动条样式 */\n.emoji-list::-webkit-scrollbar {\n  width: 6px;\n}\n\n.emoji-list::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n.emoji-list::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n/* 确保表情在消息中正确显示 */\n.msg-text img.emoji {\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  margin: 0 1px;\n}\n\n.msg-image {\n  max-width: 200px;\n  cursor: pointer;\n}\n\n.msg-image .el-image {\n  width: 100%;\n  max-width: 200px;\n  border-radius: 4px;\n}\n\n.msg-file {\n  display: flex;\n  align-items: center;\n  background: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.msg-file i {\n  font-size: 24px;\n  color: #409EFF;\n  margin-right: 10px;\n}\n\n.file-name {\n  flex: 1;\n  font-size: 14px;\n  color: #333;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-right: 10px;\n}\n\n.download-btn {\n  color: #409EFF;\n  text-decoration: none;\n}\n\n.msg-box.right .download-btn {\n  color: #2b5f0d;\n}\n\n/* 添加消息提示动画 */\n@keyframes notification-bounce {\n  0% { transform: scale(0.3); opacity: 0; }\n  50% { transform: scale(1.2); }\n  70% { transform: scale(0.9); }\n  100% { transform: scale(1); opacity: 1; }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}