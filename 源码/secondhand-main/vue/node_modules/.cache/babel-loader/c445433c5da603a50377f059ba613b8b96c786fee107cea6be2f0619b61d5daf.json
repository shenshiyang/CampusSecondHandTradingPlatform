{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      chatGroupList: [],\n      currentChatUserId: null,\n      messageList: [],\n      newMsg: '',\n      socket: null\n    };\n  },\n  created() {\n    this.connectWs();\n    this.loadGroup().then(() => {\n      const target = this.$route.query.chatUserId;\n      if (target) this.selectChat(+target);\n    });\n  },\n  beforeDestroy() {\n    this.socket && this.socket.close();\n  },\n  methods: {\n    /* ---------- WebSocket ---------- */\n    connectWs() {\n      this.socket = new WebSocket(`${location.origin.replace(/^http/, 'ws')}/chatServer/${this.user.id}`);\n      this.socket.onmessage = () => {\n        this.refreshMsg();\n      };\n    },\n    /* ---------- 会话列表 ---------- */\n    async loadGroup() {\n      const res = await this.$request.get('/chatGroup/selectUserGroup');\n      this.chatGroupList = res.data || [];\n    },\n    handleGroupClick(item) {\n      this.$router.replace({\n        query: {\n          chatUserId: item.chatUserId\n        }\n      }); // url 保持同步\n      this.selectChat(item.chatUserId);\n    },\n    async selectChat(chatUserId) {\n      if (this.currentChatUserId === chatUserId) return;\n      this.currentChatUserId = chatUserId;\n      const res = await this.$request.get('/chatInfo/selectUserChat', {\n        params: {\n          chatUserId\n        }\n      });\n      this.messageList = res.data || [];\n      await this.$request.put('/chatInfo/updateRead/' + chatUserId);\n      this.$nextTick(this.scrollBottom);\n    },\n    /* ---------- 发送 / 刷新 ---------- */\n    send() {\n      if (!this.newMsg) return;\n      const msg = {\n        from: this.user.id,\n        to: this.currentChatUserId,\n        content: this.newMsg,\n        time: new Date().toLocaleString()\n      };\n      this.socket.send(JSON.stringify(msg));\n      this.newMsg = '';\n      // 立即本地渲染\n      this.messageList.push({\n        userId: this.user.id,\n        content: msg.content\n      });\n      this.$nextTick(this.scrollBottom);\n    },\n    async refreshMsg() {\n      if (this.currentChatUserId) {\n        const res = await this.$request.get('/chatInfo/selectUserChat', {\n          params: {\n            chatUserId: this.currentChatUserId\n          }\n        });\n        this.messageList = res.data || [];\n        this.$nextTick(this.scrollBottom);\n      }\n      // 同步未读数\n      this.loadGroup();\n    },\n    scrollBottom() {\n      const box = this.$refs.msgBox;\n      if (box) box.scrollTop = box.scrollHeight;\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","chatGroupList","currentChatUserId","messageList","newMsg","socket","created","connectWs","loadGroup","then","target","$route","query","chatUserId","selectChat","beforeDestroy","close","methods","WebSocket","location","origin","replace","id","onmessage","refreshMsg","res","$request","get","handleGroupClick","item","$router","params","put","$nextTick","scrollBottom","send","msg","from","to","content","time","Date","toLocaleString","stringify","push","userId","box","$refs","msgBox","scrollTop","scrollHeight"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-wrapper\">\n    <!-- 会话列表 -->\n    <div class=\"left-side\">\n      <ul class=\"dialog-list\">\n        <li v-for=\"item in chatGroupList\"\n            :key=\"item.id\"\n            :class=\"{active: currentChatUserId===item.chatUserId}\"\n            @click=\"handleGroupClick(item)\">\n          <img :src=\"item.chatUserAvatar\" class=\"avatar\">\n          <span class=\"name\">{{ item.chatUserName }}</span>\n          <span v-if=\"item.chatNum\" class=\"unread\">{{ item.chatNum }}</span>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 聊天框 -->\n    <div class=\"right-side\" v-if=\"currentChatUserId\">\n      <div class=\"message-box\" ref=\"msgBox\">\n        <div v-for=\"m in messageList\" :key=\"m.id\"\n             :class=\"['msg', m.userId===user.id?'mine':'other']\">\n          <span class=\"text\">{{ m.content }}</span>\n        </div>\n      </div>\n\n      <div class=\"input-bar\">\n        <el-input v-model=\"newMsg\"\n                  type=\"textarea\"\n                  :rows=\"2\"\n                  placeholder=\"请输入内容\"\n                  @keyup.enter.native=\"send\"/>\n        <el-button type=\"primary\" @click=\"send\">发送</el-button>\n      </div>\n    </div>\n\n    <div v-else class=\"right-empty\">请选择会话</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chat',\n  data () {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      chatGroupList: [],\n      currentChatUserId: null,\n      messageList: [],\n      newMsg: '',\n      socket: null\n    }\n  },\n  created () {\n    this.connectWs()\n    this.loadGroup().then(() => {\n      const target = this.$route.query.chatUserId\n      if (target) this.selectChat(+target)\n    })\n  },\n  beforeDestroy () {\n    this.socket && this.socket.close()\n  },\n  methods: {\n    /* ---------- WebSocket ---------- */\n    connectWs () {\n      this.socket = new WebSocket(\n        `${location.origin.replace(/^http/, 'ws')}/chatServer/${this.user.id}`)\n      this.socket.onmessage = () => { this.refreshMsg() }\n    },\n\n    /* ---------- 会话列表 ---------- */\n    async loadGroup () {\n      const res = await this.$request.get('/chatGroup/selectUserGroup')\n      this.chatGroupList = res.data || []\n    },\n    handleGroupClick (item) {\n      this.$router.replace({ query: { chatUserId: item.chatUserId } }) // url 保持同步\n      this.selectChat(item.chatUserId)\n    },\n    async selectChat (chatUserId) {\n      if (this.currentChatUserId === chatUserId) return\n      this.currentChatUserId = chatUserId\n      const res = await this.$request.get('/chatInfo/selectUserChat',\n        { params: { chatUserId } })\n      this.messageList = res.data || []\n      await this.$request.put('/chatInfo/updateRead/' + chatUserId)\n      this.$nextTick(this.scrollBottom)\n    },\n\n    /* ---------- 发送 / 刷新 ---------- */\n    send () {\n      if (!this.newMsg) return\n      const msg = {\n        from: this.user.id,\n        to: this.currentChatUserId,\n        content: this.newMsg,\n        time: new Date().toLocaleString()\n      }\n      this.socket.send(JSON.stringify(msg))\n      this.newMsg = ''\n      // 立即本地渲染\n      this.messageList.push({\n        userId: this.user.id,\n        content: msg.content\n      })\n      this.$nextTick(this.scrollBottom)\n    },\n    async refreshMsg () {\n      if (this.currentChatUserId) {\n        const res = await this.$request.get('/chatInfo/selectUserChat',\n          { params: { chatUserId: this.currentChatUserId } })\n        this.messageList = res.data || []\n        this.$nextTick(this.scrollBottom)\n      }\n      // 同步未读数\n      this.loadGroup()\n    },\n    scrollBottom () {\n      const box = this.$refs.msgBox\n      if (box) box.scrollTop = box.scrollHeight\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-wrapper  { display:flex; height:calc(100vh - 80px); }\n.left-side     { width:240px; border-right:1px solid #eee; overflow-y:auto; background:#fafafa; }\n.right-side    { flex:1; display:flex; flex-direction:column; }\n.right-empty   { flex:1; display:flex; align-items:center; justify-content:center; color:#999; }\n\n.dialog-list   { list-style:none; margin:0; padding:0; }\n.dialog-list li{ display:flex; align-items:center; padding:10px 14px; cursor:pointer; gap:10px; }\n.dialog-list li.active{ background:#ecf5ff; color:#409EFF; }\n.avatar        { width:32px; height:32px; border-radius:50%; object-fit:cover; }\n.unread        { background:#ff3c3c; color:#fff; border-radius:10px; padding:0 6px; font-size:12px; margin-left:auto; }\n.name          { flex:1; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }\n\n.message-box   { flex:1; padding:20px; overflow-y:auto; background:#f7f9fa; }\n.msg           { margin:6px 0; display:flex; }\n.msg.mine      { justify-content:flex-end; }\n.msg .text     { max-width:60%; padding:8px 12px; border-radius:6px; line-height:22px; word-break:break-all; }\n.msg.mine .text{ background:#409EFF; color:#fff; }\n.msg.other .text{ background:#fff; border:1px solid #eee; }\n\n.input-bar     { display:flex; gap:10px; padding:10px; border-top:1px solid #eee; background:#fff; }\n</style>\n"],"mappings":";AAwCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,aAAA;MACAC,iBAAA;MACAC,WAAA;MACAC,MAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;IACA,KAAAC,SAAA,GAAAC,IAAA;MACA,MAAAC,MAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAC,UAAA;MACA,IAAAH,MAAA,OAAAI,UAAA,EAAAJ,MAAA;IACA;EACA;EACAK,cAAA;IACA,KAAAV,MAAA,SAAAA,MAAA,CAAAW,KAAA;EACA;EACAC,OAAA;IACA;IACAV,UAAA;MACA,KAAAF,MAAA,OAAAa,SAAA,CACA,GAAAC,QAAA,CAAAC,MAAA,CAAAC,OAAA,mCAAAzB,IAAA,CAAA0B,EAAA;MACA,KAAAjB,MAAA,CAAAkB,SAAA;QAAA,KAAAC,UAAA;MAAA;IACA;IAEA;IACA,MAAAhB,UAAA;MACA,MAAAiB,GAAA,cAAAC,QAAA,CAAAC,GAAA;MACA,KAAA1B,aAAA,GAAAwB,GAAA,CAAA9B,IAAA;IACA;IACAiC,iBAAAC,IAAA;MACA,KAAAC,OAAA,CAAAT,OAAA;QAAAT,KAAA;UAAAC,UAAA,EAAAgB,IAAA,CAAAhB;QAAA;MAAA;MACA,KAAAC,UAAA,CAAAe,IAAA,CAAAhB,UAAA;IACA;IACA,MAAAC,WAAAD,UAAA;MACA,SAAAX,iBAAA,KAAAW,UAAA;MACA,KAAAX,iBAAA,GAAAW,UAAA;MACA,MAAAY,GAAA,cAAAC,QAAA,CAAAC,GAAA,6BACA;QAAAI,MAAA;UAAAlB;QAAA;MAAA;MACA,KAAAV,WAAA,GAAAsB,GAAA,CAAA9B,IAAA;MACA,WAAA+B,QAAA,CAAAM,GAAA,2BAAAnB,UAAA;MACA,KAAAoB,SAAA,MAAAC,YAAA;IACA;IAEA;IACAC,KAAA;MACA,UAAA/B,MAAA;MACA,MAAAgC,GAAA;QACAC,IAAA,OAAAzC,IAAA,CAAA0B,EAAA;QACAgB,EAAA,OAAApC,iBAAA;QACAqC,OAAA,OAAAnC,MAAA;QACAoC,IAAA,MAAAC,IAAA,GAAAC,cAAA;MACA;MACA,KAAArC,MAAA,CAAA8B,IAAA,CAAAtC,IAAA,CAAA8C,SAAA,CAAAP,GAAA;MACA,KAAAhC,MAAA;MACA;MACA,KAAAD,WAAA,CAAAyC,IAAA;QACAC,MAAA,OAAAjD,IAAA,CAAA0B,EAAA;QACAiB,OAAA,EAAAH,GAAA,CAAAG;MACA;MACA,KAAAN,SAAA,MAAAC,YAAA;IACA;IACA,MAAAV,WAAA;MACA,SAAAtB,iBAAA;QACA,MAAAuB,GAAA,cAAAC,QAAA,CAAAC,GAAA,6BACA;UAAAI,MAAA;YAAAlB,UAAA,OAAAX;UAAA;QAAA;QACA,KAAAC,WAAA,GAAAsB,GAAA,CAAA9B,IAAA;QACA,KAAAsC,SAAA,MAAAC,YAAA;MACA;MACA;MACA,KAAA1B,SAAA;IACA;IACA0B,aAAA;MACA,MAAAY,GAAA,QAAAC,KAAA,CAAAC,MAAA;MACA,IAAAF,GAAA,EAAAA,GAAA,CAAAG,SAAA,GAAAH,GAAA,CAAAI,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}