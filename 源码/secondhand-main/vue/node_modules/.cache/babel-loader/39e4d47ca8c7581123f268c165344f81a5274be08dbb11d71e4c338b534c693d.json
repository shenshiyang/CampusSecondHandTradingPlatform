{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null,\n      showEmoji: false,\n      heartbeatTimer: null,\n      heartbeatInterval: 30000,\n      // 30秒发送一次心跳\n      reconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n      emojiList: ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇', '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩', '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣', '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬', '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗', '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯', '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐', '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈', '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾']\n    };\n  },\n  mounted() {\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n    this.initWebSocket();\n    document.addEventListener('click', this.closeEmojiPanel);\n  },\n  beforeDestroy() {\n    this.closeWebSocket();\n    document.removeEventListener('click', this.closeEmojiPanel);\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n      // 清除未读消息数\n      if (item.unreadCount) {\n        const index = this.userList.findIndex(u => u.chatUserId === item.chatUserId);\n        if (index !== -1) {\n          this.$set(this.userList[index], 'unreadCount', 0);\n        }\n      }\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data || [];\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      this.closeWebSocket();\n      const wsUrl = `ws://${window.location.host}/chatServer/${this.user.id}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket连接成功');\n        this.reconnectAttempts = 0;\n        this.startHeartbeat();\n      };\n      this.ws.onmessage = e => {\n        try {\n          const data = JSON.parse(e.data);\n          console.log('收到WebSocket消息:', data); // 添加日志\n\n          switch (data.type) {\n            case 'chat':\n              this.handleChatMessage(data);\n              break;\n            case 'heartbeat':\n              console.log('收到心跳响应');\n              break;\n            case 'error':\n              this.$message.error(data.message || '发生错误');\n              break;\n            default:\n              console.warn('未知的消息类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error, '原始消息:', e.data);\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket连接关闭');\n        this.stopHeartbeat();\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n          setTimeout(() => {\n            this.initWebSocket();\n          }, delay);\n        } else {\n          this.$message.error('WebSocket连接失败，请刷新页面重试');\n        }\n      };\n      this.ws.onerror = () => {\n        console.error('WebSocket连接错误');\n        this.closeWebSocket();\n      };\n    },\n    startHeartbeat() {\n      this.stopHeartbeat();\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'heartbeat'\n          }));\n        }\n      }, this.heartbeatInterval);\n    },\n    stopHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = null;\n      }\n    },\n    closeWebSocket() {\n      this.stopHeartbeat();\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n    },\n    send() {\n      if (!this.content.trim()) return;\n\n      // 创建消息对象\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        contentType: 'text'\n      };\n\n      // 发送消息到服务器\n      this.$request.post('/chatInfo/add', msg).then(res => {\n        if (res.code === '200') {\n          // 添加到本地聊天列表\n          this.chatList.push({\n            ...msg,\n            userName: this.user.name,\n            userAvatar: this.user.avatar\n          });\n\n          // 发送WebSocket消息\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const wsMessage = {\n              type: 'chat',\n              fromUserId: this.user.id,\n              fromUserName: this.user.name,\n              fromUserAvatar: this.user.avatar,\n              toUserId: this.active,\n              content: this.content,\n              contentType: 'text',\n              timestamp: new Date().getTime()\n            };\n            this.ws.send(JSON.stringify(wsMessage));\n          }\n\n          // 清空输入框并滚动到底部\n          this.content = '';\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        } else {\n          this.$message.error('发送失败');\n        }\n      }).catch(err => {\n        console.error('发送消息失败:', err);\n        this.$message.error('发送失败，请重试');\n      });\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmoji = false;\n    },\n    closeEmojiPanel(e) {\n      const emojiTool = document.querySelector('.emoji-tool');\n      if (emojiTool && !emojiTool.contains(e.target)) {\n        this.showEmoji = false;\n      }\n    },\n    handleImageSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'image'\n        };\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'image',\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    handleFileSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'file',\n          fileName: file.name\n        };\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'file',\n                fileName: file.name,\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    previewImage(imageUrl) {\n      // 实现图片预览逻辑\n    },\n    handleChatMessage(data) {\n      // 检查消息是否完整\n      if (!data.fromUserId || !data.toUserId || !data.content) {\n        console.error('消息格式不完整:', data);\n        return;\n      }\n\n      // 判断是否是当前聊天对象的消息\n      const isCurrentChat = data.fromUserId === this.active && data.toUserId === this.user.id || data.toUserId === this.active && data.fromUserId === this.user.id;\n      if (isCurrentChat) {\n        const newMsg = {\n          userId: data.fromUserId,\n          chatUserId: data.toUserId,\n          text: data.content,\n          contentType: data.contentType || 'text',\n          fileName: data.fileName\n        };\n        this.chatList.push(newMsg);\n\n        // 如果是收到的消息，标记为已读\n        if (data.toUserId === this.user.id) {\n          this.$request.put(`/chatInfo/updateRead/${data.fromUserId}`);\n        }\n        this.$nextTick(() => {\n          const box = this.$refs.chatBox;\n          if (box) box.scrollTop = box.scrollHeight;\n        });\n      } else {\n        // 如果不是当前聊天窗口的消息，更新未读消息数\n        const userIndex = this.userList.findIndex(u => u.chatUserId === data.fromUserId);\n        if (userIndex !== -1) {\n          const user = this.userList[userIndex];\n          this.$set(this.userList[userIndex], 'unreadCount', (user.unreadCount || 0) + 1);\n          this.$set(this.userList[userIndex], 'lastMessage', data.content);\n        }\n      }\n\n      // 刷新聊天列表\n      this.loadUserList();\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","userList","chatList","chatTitle","active","content","activeUserAvatar","ws","showEmoji","heartbeatTimer","heartbeatInterval","reconnectAttempts","maxReconnectAttempts","emojiList","mounted","loadUserList","then","toUserId","$route","query","target","find","u","chatUserId","changeChatUser","$request","post","userId","id","added","initWebSocket","document","addEventListener","closeEmojiPanel","beforeDestroy","closeWebSocket","removeEventListener","methods","get","res","code","item","chatUserName","chatUserAvatar","put","loadChatRecord","unreadCount","index","findIndex","$set","$nextTick","box","$refs","chatBox","scrollTop","scrollHeight","WebSocket","$message","error","wsUrl","window","location","host","onopen","console","log","startHeartbeat","onmessage","e","type","handleChatMessage","message","warn","onclose","stopHeartbeat","delay","Math","min","pow","setTimeout","onerror","setInterval","readyState","OPEN","send","stringify","clearInterval","close","trim","msg","text","contentType","push","userName","name","userAvatar","avatar","wsMessage","fromUserId","fromUserName","fromUserAvatar","timestamp","Date","getTime","catch","err","insertEmoji","emoji","emojiTool","querySelector","contains","handleImageSuccess","response","file","handleFileSuccess","fileName","previewImage","imageUrl","isCurrentChat","newMsg","userIndex"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <div class=\"chat-user-list\">\n      <div\n        v-for=\"item in userList\"\n        :key=\"item.chatUserId\"\n        :class=\"['chat-user', item.chatUserId === active ? 'active' : '']\"\n        @click=\"changeChatUser(item)\">\n        <div class=\"user-avatar\">\n          <img :src=\"item.chatUserAvatar\" alt=\"\">\n          <span v-if=\"item.unreadCount\" class=\"unread-count\">{{ item.unreadCount }}</span>\n        </div>\n        <div class=\"user-info\">\n          <div class=\"user-name\">{{ item.chatUserName }}</div>\n          <div class=\"last-msg\">{{ item.lastMessage }}</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-main\" v-if=\"active\">\n      <div class=\"chat-header\">\n        <div class=\"chat-title\">\n          <img :src=\"activeUserAvatar\" alt=\"\" class=\"title-avatar\">\n          <span>{{ chatTitle }}</span>\n        </div>\n        <div class=\"chat-actions\">\n          <i class=\"el-icon-more\"></i>\n        </div>\n      </div>\n\n      <div class=\"chat-box\" ref=\"chatBox\">\n        <div\n          v-for=\"(item, index) in chatList\"\n          :key=\"index\"\n          :class=\"['msg-box', item.userId === user.id ? 'right' : 'left']\">\n          <img\n            class=\"avatar\"\n            :src=\"item.userId === user.id ? user.avatar : activeUserAvatar\"\n            alt=\"头像\">\n          <div class=\"msg-content\">\n            <div class=\"msg-text\" v-if=\"!item.contentType || item.contentType === 'text'\">{{ item.text }}</div>\n            <div class=\"msg-image\" v-else-if=\"item.contentType === 'image'\" @click=\"previewImage(item.text)\">\n              <el-image \n                :src=\"item.text\" \n                :preview-src-list=\"[item.text]\"\n                fit=\"cover\">\n              </el-image>\n            </div>\n            <div class=\"msg-file\" v-else-if=\"item.contentType === 'file'\">\n              <i class=\"el-icon-document\"></i>\n              <span class=\"file-name\">{{ item.fileName || '文件' }}</span>\n              <a :href=\"item.text\" target=\"_blank\" class=\"download-btn\">下载</a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <div class=\"input-tools\">\n          <div class=\"emoji-tool\">\n            <i class=\"el-icon-sunny\" @click=\"showEmoji = !showEmoji\"></i>\n            <div class=\"emoji-panel\" v-show=\"showEmoji\">\n              <div class=\"emoji-list\">\n                <span\n                  v-for=\"(emoji, index) in emojiList\"\n                  :key=\"index\"\n                  @click=\"insertEmoji(emoji)\"\n                  class=\"emoji-item\"\n                >{{ emoji }}</span>\n              </div>\n            </div>\n          </div>\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"$baseUrl + '/files/upload'\"\n            :headers=\"{ token: user.token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleImageSuccess\"\n            accept=\"image/*\">\n            <i class=\"el-icon-picture-outline\"></i>\n          </el-upload>\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"$baseUrl + '/files/upload'\"\n            :headers=\"{ token: user.token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleFileSuccess\"\n            accept=\"*\">\n            <i class=\"el-icon-folder\"></i>\n          </el-upload>\n        </div>\n        <div class=\"input-box\">\n          <el-input\n            v-model=\"content\"\n            type=\"textarea\"\n            :rows=\"3\"\n            placeholder=\"请输入聊天内容\"\n            @keyup.enter.native=\"send\"\n            resize=\"none\">\n          </el-input>\n          <el-button type=\"primary\" class=\"send-btn\" @click=\"send\">发送</el-button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-welcome\" v-else>\n      <div class=\"welcome-content\">\n        <i class=\"el-icon-chat-line-round\"></i>\n        <p>选择一个联系人开始聊天</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null,\n      showEmoji: false,\n      heartbeatTimer: null,\n      heartbeatInterval: 30000, // 30秒发送一次心跳\n      reconnectAttempts: 0,\n      maxReconnectAttempts: 5,\n      emojiList: [\n        '😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇',\n        '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚',\n        '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩',\n        '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣',\n        '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬',\n        '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗',\n        '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯',\n        '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐',\n        '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈',\n        '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾'\n      ]\n    }\n  },\n  mounted() {\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n    this.initWebSocket();\n    document.addEventListener('click', this.closeEmojiPanel);\n  },\n  beforeDestroy() {\n    this.closeWebSocket();\n    document.removeEventListener('click', this.closeEmojiPanel);\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n      // 清除未读消息数\n      if (item.unreadCount) {\n        const index = this.userList.findIndex(u => u.chatUserId === item.chatUserId);\n        if (index !== -1) {\n          this.$set(this.userList[index], 'unreadCount', 0);\n        }\n      }\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data || [];\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      this.closeWebSocket();\n      \n      const wsUrl = `ws://${window.location.host}/chatServer/${this.user.id}`;\n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket连接成功');\n        this.reconnectAttempts = 0;\n        this.startHeartbeat();\n      };\n      \n      this.ws.onmessage = (e) => {\n        try {\n          const data = JSON.parse(e.data);\n          console.log('收到WebSocket消息:', data);  // 添加日志\n\n          switch(data.type) {\n            case 'chat':\n              this.handleChatMessage(data);\n              break;\n            case 'heartbeat':\n              console.log('收到心跳响应');\n              break;\n            case 'error':\n              this.$message.error(data.message || '发生错误');\n              break;\n            default:\n              console.warn('未知的消息类型:', data.type);\n          }\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error, '原始消息:', e.data);\n        }\n      };\n      \n      this.ws.onclose = () => {\n        console.log('WebSocket连接关闭');\n        this.stopHeartbeat();\n        \n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n          setTimeout(() => {\n            this.initWebSocket();\n          }, delay);\n        } else {\n          this.$message.error('WebSocket连接失败，请刷新页面重试');\n        }\n      };\n      \n      this.ws.onerror = () => {\n        console.error('WebSocket连接错误');\n        this.closeWebSocket();\n      };\n    },\n    startHeartbeat() {\n      this.stopHeartbeat();\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({ type: 'heartbeat' }));\n        }\n      }, this.heartbeatInterval);\n    },\n    stopHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = null;\n      }\n    },\n    closeWebSocket() {\n      this.stopHeartbeat();\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n    },\n    send() {\n      if (!this.content.trim()) return;\n      \n      // 创建消息对象\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        contentType: 'text'\n      };\n\n      // 发送消息到服务器\n      this.$request.post('/chatInfo/add', msg).then(res => {\n        if (res.code === '200') {\n          // 添加到本地聊天列表\n          this.chatList.push({\n            ...msg,\n            userName: this.user.name,\n            userAvatar: this.user.avatar\n          });\n\n          // 发送WebSocket消息\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            const wsMessage = {\n              type: 'chat',\n              fromUserId: this.user.id,\n              fromUserName: this.user.name,\n              fromUserAvatar: this.user.avatar,\n              toUserId: this.active,\n              content: this.content,\n              contentType: 'text',\n              timestamp: new Date().getTime()\n            };\n            this.ws.send(JSON.stringify(wsMessage));\n          }\n\n          // 清空输入框并滚动到底部\n          this.content = '';\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        } else {\n          this.$message.error('发送失败');\n        }\n      }).catch(err => {\n        console.error('发送消息失败:', err);\n        this.$message.error('发送失败，请重试');\n      });\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmoji = false;\n    },\n    closeEmojiPanel(e) {\n      const emojiTool = document.querySelector('.emoji-tool');\n      if (emojiTool && !emojiTool.contains(e.target)) {\n        this.showEmoji = false;\n      }\n    },\n    handleImageSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'image'\n        };\n\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'image',\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    handleFileSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'file',\n          fileName: file.name\n        };\n\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'file',\n                fileName: file.name,\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    previewImage(imageUrl) {\n      // 实现图片预览逻辑\n    },\n    handleChatMessage(data) {\n      // 检查消息是否完整\n      if (!data.fromUserId || !data.toUserId || !data.content) {\n        console.error('消息格式不完整:', data);\n        return;\n      }\n\n      // 判断是否是当前聊天对象的消息\n      const isCurrentChat = (data.fromUserId === this.active && data.toUserId === this.user.id) || \n                           (data.toUserId === this.active && data.fromUserId === this.user.id);\n\n      if (isCurrentChat) {\n        const newMsg = {\n          userId: data.fromUserId,\n          chatUserId: data.toUserId,\n          text: data.content,\n          contentType: data.contentType || 'text',\n          fileName: data.fileName\n        };\n        \n        this.chatList.push(newMsg);\n        \n        // 如果是收到的消息，标记为已读\n        if (data.toUserId === this.user.id) {\n          this.$request.put(`/chatInfo/updateRead/${data.fromUserId}`);\n        }\n        \n        this.$nextTick(() => {\n          const box = this.$refs.chatBox;\n          if (box) box.scrollTop = box.scrollHeight;\n        });\n      } else {\n        // 如果不是当前聊天窗口的消息，更新未读消息数\n        const userIndex = this.userList.findIndex(u => u.chatUserId === data.fromUserId);\n        if (userIndex !== -1) {\n          const user = this.userList[userIndex];\n          this.$set(this.userList[userIndex], 'unreadCount', (user.unreadCount || 0) + 1);\n          this.$set(this.userList[userIndex], 'lastMessage', data.content);\n        }\n      }\n\n      // 刷新聊天列表\n      this.loadUserList();\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  height: 85vh;\n  background: #f5f5f5;\n  margin: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.chat-user-list {\n  width: 280px;\n  background: #f5f5f5;\n  border-right: 1px solid #e6e6e6;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-user {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  cursor: pointer;\n  position: relative;\n}\n\n.chat-user:hover,\n.chat-user.active {\n  background-color: #e6e6e6;\n}\n\n.user-avatar {\n  position: relative;\n  margin-right: 12px;\n}\n\n.user-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n}\n\n.unread-count {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background: #f56c6c;\n  color: white;\n  border-radius: 10px;\n  min-width: 18px;\n  height: 18px;\n  line-height: 18px;\n  text-align: center;\n  font-size: 12px;\n  padding: 0 6px;\n}\n\n.user-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.user-name {\n  font-size: 14px;\n  color: #333;\n  margin-bottom: 4px;\n}\n\n.last-msg {\n  font-size: 12px;\n  color: #999;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: #f5f5f5;\n}\n\n.chat-header {\n  height: 60px;\n  background: #f5f5f5;\n  border-bottom: 1px solid #e6e6e6;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px;\n}\n\n.chat-title {\n  display: flex;\n  align-items: center;\n}\n\n.title-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.chat-actions {\n  color: #666;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n.chat-box {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background: #f5f5f5;\n}\n\n.msg-box {\n  display: flex;\n  margin-bottom: 20px;\n}\n\n.msg-box.left {\n  flex-direction: row;\n}\n\n.msg-box.right {\n  flex-direction: row-reverse;\n}\n\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  margin: 0 10px;\n}\n\n.msg-content {\n  max-width: 60%;\n}\n\n.msg-text {\n  background: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  word-break: break-all;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  white-space: pre-wrap;\n}\n\n.msg-box.right .msg-text {\n  background: #95ec69;\n}\n\n.chat-input {\n  background: #f5f5f5;\n  border-top: 1px solid #e6e6e6;\n  padding: 10px;\n}\n\n.input-tools {\n  display: flex;\n  padding: 5px 0;\n}\n\n.input-tools i {\n  font-size: 20px;\n  color: #666;\n  margin-right: 15px;\n  cursor: pointer;\n}\n\n.input-box {\n  margin: 5px 0;\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  gap: 10px;\n}\n\n.input-box .el-textarea {\n  flex: 1;\n}\n\n.send-btn {\n  height: 65px;\n  padding: 0 20px;\n}\n\n.input-actions {\n  display: none;\n}\n\n.chat-welcome {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #f5f5f5;\n  border-left: 1px solid #e6e6e6;\n}\n\n.welcome-content {\n  text-align: center;\n  color: #909399;\n}\n\n.welcome-content i {\n  font-size: 80px;\n  margin-bottom: 20px;\n}\n\n.welcome-content p {\n  font-size: 16px;\n  margin: 0;\n}\n\n.emoji-tool {\n  position: relative;\n  display: inline-block;\n}\n\n.emoji-panel {\n  position: absolute;\n  bottom: 40px;\n  left: 0;\n  width: 360px;\n  height: 200px;\n  background: white;\n  border: 1px solid #e6e6e6;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n  padding: 10px;\n  z-index: 1000;\n}\n\n.emoji-list {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 5px;\n  height: 100%;\n  overflow-y: auto;\n}\n\n.emoji-item {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px;\n  transition: all 0.3s;\n}\n\n.emoji-item:hover {\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n/* 自定义滚动条样式 */\n.emoji-list::-webkit-scrollbar {\n  width: 6px;\n}\n\n.emoji-list::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n.emoji-list::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n/* 确保表情在消息中正确显示 */\n.msg-text img.emoji {\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  margin: 0 1px;\n}\n\n.msg-image {\n  max-width: 200px;\n  cursor: pointer;\n}\n\n.msg-image .el-image {\n  width: 100%;\n  max-width: 200px;\n  border-radius: 4px;\n}\n\n.msg-file {\n  display: flex;\n  align-items: center;\n  background: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.msg-file i {\n  font-size: 24px;\n  color: #409EFF;\n  margin-right: 10px;\n}\n\n.file-name {\n  flex: 1;\n  font-size: 14px;\n  color: #333;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-right: 10px;\n}\n\n.download-btn {\n  color: #409EFF;\n  text-decoration: none;\n}\n\n.msg-box.right .download-btn {\n  color: #2b5f0d;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}