{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      chatGroupList: [],\n      currentChatUserId: null,\n      currentChatName: '',\n      currentChatAvatar: '',\n      messageList: [],\n      socket: null,\n      text: '',\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    };\n  },\n  created() {\n    // ① 建立 websocket\n    this.initSocket();\n    // ② 拉取会话分组\n    this.loadGroup().then(() => {\n      // url 携带 chatUserId ? 自动选中\n      const id = Number(this.$route.query.chatUserId);\n      if (id) this.selectChat(id);\n    });\n  },\n  beforeDestroy() {\n    if (this.socket) this.socket.close();\n    clearInterval(this.heartbeatTimer);\n  },\n  methods: {\n    /* ---------- WebSocket ---------- */\n    initSocket() {\n      const url = `${process.env.VUE_APP_WS}/chatServer/${this.user.id}`;\n      this.socket = new WebSocket(url);\n\n      // 收到消息\n      this.socket.onmessage = e => {\n        const msg = JSON.parse(e.data || '{}');\n        if (msg.sendId === this.currentChatUserId) {\n          this.messageList.push(msg);\n          this.$nextTick(this.scrollToBottom);\n        } else {\n          // 未读 +1\n          const g = this.chatGroupList.find(v => v.chatUserId === msg.sendId);\n          if (g) g.chatNum = (g.chatNum || 0) + 1;\n        }\n      };\n\n      // 心跳包\n      this.heartbeatTimer = setInterval(() => {\n        this.socket?.readyState === 1 && this.socket.send('ping');\n      }, 30000);\n    },\n    /* ---------- 接口 ---------- */\n    async loadGroup() {\n      const res = await this.$request.get('/chatGroup/selectUserGroup');\n      this.chatGroupList = res.data || [];\n    },\n    async loadHistory(chatUserId) {\n      const res = await this.$request.get('/chatInfo/selectUserChat', {\n        params: {\n          chatUserId\n        }\n      });\n      this.messageList = res.data || [];\n      this.$nextTick(this.scrollToBottom);\n      // 已读回执\n      await this.$request.put('/chatInfo/updateRead/' + chatUserId);\n    },\n    /* ---------- 会话操作 ---------- */\n    handleGroupClick(g) {\n      if (this.currentChatUserId === g.chatUserId) return;\n      this.$router.replace({\n        query: {\n          chatUserId: g.chatUserId\n        }\n      });\n      this.selectChat(g.chatUserId);\n    },\n    async selectChat(chatUserId) {\n      const g = this.chatGroupList.find(v => v.chatUserId === chatUserId);\n      if (!g) return;\n      this.currentChatUserId = chatUserId;\n      this.currentChatName = g.chatUserName;\n      this.currentChatAvatar = g.chatUserAvatar;\n      g.chatNum = 0;\n      await this.loadHistory(chatUserId);\n    },\n    /* ---------- 发送消息 ---------- */\n    onKeydown(e) {\n      if (e.key === 'Enter' && !e.ctrlKey) {\n        e.preventDefault();\n        this.send();\n      }\n    },\n    async send() {\n      if (!this.text.trim()) return;\n      const msgObj = {\n        sendId: this.user.id,\n        sendAvatar: this.user.avatar,\n        chatUserId: this.currentChatUserId,\n        content: this.text\n      };\n      // 先 push 本地，提升即时性\n      this.messageList.push({\n        ...msgObj,\n        id: Date.now()\n      });\n      this.$nextTick(this.scrollToBottom);\n      this.text = '';\n\n      // 调接口保存 + 推送\n      await this.$request.post('/chatInfo/add', msgObj);\n      // websocket 推送\n      this.socket?.send(JSON.stringify(msgObj));\n    },\n    /* ---------- 辅助 ---------- */\n    scrollToBottom() {\n      const box = this.$refs.msgBox;\n      if (box) box.scrollTop = box.scrollHeight;\n    }\n  }\n};","map":{"version":3,"names":["name","data","chatGroupList","currentChatUserId","currentChatName","currentChatAvatar","messageList","socket","text","user","JSON","parse","localStorage","getItem","created","initSocket","loadGroup","then","id","Number","$route","query","chatUserId","selectChat","beforeDestroy","close","clearInterval","heartbeatTimer","methods","url","process","env","VUE_APP_WS","WebSocket","onmessage","e","msg","sendId","push","$nextTick","scrollToBottom","g","find","v","chatNum","setInterval","readyState","send","res","$request","get","loadHistory","params","put","handleGroupClick","$router","replace","chatUserName","chatUserAvatar","onKeydown","key","ctrlKey","preventDefault","trim","msgObj","sendAvatar","avatar","content","Date","now","post","stringify","box","$refs","msgBox","scrollTop","scrollHeight"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-wrapper\">\n    <!-- ▍左侧会话列表 -->\n    <aside class=\"dialog-list\">\n      <header class=\"sidebar-header\">会话列表</header>\n\n      <ul>\n        <li\n          v-for=\"g in chatGroupList\"\n          :key=\"g.id\"\n          :class=\"{ active: currentChatUserId === g.chatUserId }\"\n          @click=\"handleGroupClick(g)\"\n        >\n          <img :src=\"g.chatUserAvatar\" class=\"avatar\" />\n          <span class=\"name ellipsis\">{{ g.chatUserName }}</span>\n          <span v-if=\"g.chatNum\" class=\"unread\">{{ g.chatNum }}</span>\n        </li>\n      </ul>\n    </aside>\n\n    <!-- ▍右侧聊天区域 -->\n    <section class=\"chat-panel\" v-if=\"currentChatUserId\">\n      <!-- 头部：聊天对象信息 -->\n      <div class=\"chat-header\">\n        <div class=\"user\">\n          <img\n            :src=\"currentChatAvatar\"\n            class=\"avatar\"\n          />\n          <span class=\"name\">{{ currentChatName }}</span>\n        </div>\n      </div>\n\n      <!-- 消息列表 -->\n      <div class=\"msg-box\" ref=\"msgBox\">\n        <!-- 系统欢迎语 / 空状态 -->\n        <div v-if=\"messageList.length === 0\" class=\"empty\">暂无聊天记录~</div>\n\n        <!-- 聊天气泡 -->\n        <div\n          v-for=\"m in messageList\"\n          :key=\"m.id\"\n          :class=\"['bubble-wrapper', m.sendId === user.id ? 'mine' : 'other']\"\n        >\n          <img :src=\"m.sendAvatar\" class=\"avatar\" />\n          <div class=\"bubble\" v-html=\"m.content\"></div>\n        </div>\n      </div>\n\n      <!-- 输入框 -->\n      <div class=\"input-bar\">\n        <el-input\n          v-model=\"text\"\n          type=\"textarea\"\n          :autosize=\"{ minRows: 1, maxRows: 4 }\"\n          placeholder=\"回车发送，Ctrl + Enter 换行\"\n          @keydown.native=\"onKeydown\"\n        />\n        <el-button type=\"primary\" size=\"small\" @click=\"send\">发送</el-button>\n      </div>\n    </section>\n\n    <!-- 右侧占位：当未选择会话 -->\n    <section class=\"chat-panel placeholder\" v-else>\n      <div class=\"empty\">请选择一个联系人开始聊天</div>\n    </section>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      chatGroupList: [],\n      currentChatUserId: null,\n      currentChatName: '',\n      currentChatAvatar: '',\n      messageList: [],\n      socket: null,\n      text: '',\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    }\n  },\n  created() {\n    // ① 建立 websocket\n    this.initSocket()\n    // ② 拉取会话分组\n    this.loadGroup().then(() => {\n      // url 携带 chatUserId ? 自动选中\n      const id = Number(this.$route.query.chatUserId)\n      if (id) this.selectChat(id)\n    })\n  },\n  beforeDestroy() {\n    if (this.socket) this.socket.close()\n    clearInterval(this.heartbeatTimer)\n  },\n  methods: {\n    /* ---------- WebSocket ---------- */\n    initSocket() {\n      const url = `${process.env.VUE_APP_WS}/chatServer/${this.user.id}`\n      this.socket = new WebSocket(url)\n\n      // 收到消息\n      this.socket.onmessage = (e) => {\n        const msg = JSON.parse(e.data || '{}')\n        if (msg.sendId === this.currentChatUserId) {\n          this.messageList.push(msg)\n          this.$nextTick(this.scrollToBottom)\n        } else {\n          // 未读 +1\n          const g = this.chatGroupList.find(v => v.chatUserId === msg.sendId)\n          if (g) g.chatNum = (g.chatNum || 0) + 1\n        }\n      }\n\n      // 心跳包\n      this.heartbeatTimer = setInterval(() => {\n        this.socket?.readyState === 1 && this.socket.send('ping')\n      }, 30000)\n    },\n\n    /* ---------- 接口 ---------- */\n    async loadGroup() {\n      const res = await this.$request.get('/chatGroup/selectUserGroup')\n      this.chatGroupList = res.data || []\n    },\n    async loadHistory(chatUserId) {\n      const res = await this.$request.get('/chatInfo/selectUserChat', { params: { chatUserId } })\n      this.messageList = res.data || []\n      this.$nextTick(this.scrollToBottom)\n      // 已读回执\n      await this.$request.put('/chatInfo/updateRead/' + chatUserId)\n    },\n\n    /* ---------- 会话操作 ---------- */\n    handleGroupClick(g) {\n      if (this.currentChatUserId === g.chatUserId) return\n      this.$router.replace({ query: { chatUserId: g.chatUserId } })\n      this.selectChat(g.chatUserId)\n    },\n    async selectChat(chatUserId) {\n      const g = this.chatGroupList.find(v => v.chatUserId === chatUserId)\n      if (!g) return\n      this.currentChatUserId = chatUserId\n      this.currentChatName = g.chatUserName\n      this.currentChatAvatar = g.chatUserAvatar\n      g.chatNum = 0\n      await this.loadHistory(chatUserId)\n    },\n\n    /* ---------- 发送消息 ---------- */\n    onKeydown(e) {\n      if (e.key === 'Enter' && !e.ctrlKey) {\n        e.preventDefault()\n        this.send()\n      }\n    },\n    async send() {\n      if (!this.text.trim()) return\n      const msgObj = {\n        sendId: this.user.id,\n        sendAvatar: this.user.avatar,\n        chatUserId: this.currentChatUserId,\n        content: this.text\n      }\n      // 先 push 本地，提升即时性\n      this.messageList.push({ ...msgObj, id: Date.now() })\n      this.$nextTick(this.scrollToBottom)\n      this.text = ''\n\n      // 调接口保存 + 推送\n      await this.$request.post('/chatInfo/add', msgObj)\n      // websocket 推送\n      this.socket?.send(JSON.stringify(msgObj))\n    },\n\n    /* ---------- 辅助 ---------- */\n    scrollToBottom() {\n      const box = this.$refs.msgBox\n      if (box) box.scrollTop = box.scrollHeight\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 主体布局 */\n.chat-wrapper {\n  display: flex;\n  height: calc(100vh - 70px);\n  padding: 20px;\n  box-sizing: border-box;\n}\n\n/* ▍左侧列表 */\n.dialog-list {\n  width: 260px;\n  border-right: 1px solid #eaeaea;\n  display: flex;\n  flex-direction: column;\n}\n.sidebar-header {\n  font-weight: 600;\n  padding: 10px 16px;\n  border-bottom: 1px solid #eaeaea;\n}\n.dialog-list ul {\n  flex: 1;\n  overflow-y: auto;\n}\n.dialog-list li {\n  display: flex;\n  align-items: center;\n  padding: 10px 16px;\n  cursor: pointer;\n  transition: background 0.3s;\n}\n.dialog-list li.active,\n.dialog-list li:hover {\n  background: #ecf5ff;\n}\n.dialog-list .avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n.dialog-list .name {\n  flex: 1;\n}\n.unread {\n  background: #ff3c3c;\n  color: #fff;\n  font-size: 12px;\n  border-radius: 10px;\n  padding: 0 6px;\n}\n\n/* ▍右侧聊天面板 */\n.chat-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  margin-left: 20px;\n  border-radius: 6px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\n  background: #fff;\n}\n.chat-header {\n  padding: 12px 20px;\n  border-bottom: 1px solid #f0f0f0;\n  display: flex;\n  align-items: center;\n}\n.chat-header .avatar {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n.chat-header .name {\n  font-weight: 600;\n  font-size: 16px;\n}\n.msg-box {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px 20px;\n}\n.empty {\n  color: #999;\n  text-align: center;\n  margin-top: 40px;\n}\n/* 气泡 */\n.bubble-wrapper {\n  display: flex;\n  margin-bottom: 12px;\n}\n.bubble-wrapper.other {\n  flex-direction: row;\n}\n.bubble-wrapper.mine {\n  flex-direction: row-reverse;\n}\n.bubble {\n  max-width: 60%;\n  padding: 10px 14px;\n  border-radius: 4px;\n  background: #f5f7fa;\n  word-break: break-all;\n}\n.bubble-wrapper.mine .bubble {\n  background: #409eff;\n  color: #fff;\n}\n.bubble-wrapper .avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  margin: 0 8px;\n}\n\n/* 输入栏 */\n.input-bar {\n  padding: 10px 20px;\n  border-top: 1px solid #f0f0f0;\n  display: flex;\n  gap: 10px;\n}\n.input-bar .el-input {\n  flex: 1;\n}\n.placeholder {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}