{"ast":null,"code":"export default {\n  name: 'FrontFeedback',\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      keyword: this.$route.query.title || '',\n      // 查询关键字\n      /* 以下保留原功能字段（新增/编辑）—— 兼容后端接口 */\n      fromVisible: false,\n      form: {},\n      ids: [],\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    };\n  },\n  created() {\n    this.load();\n  },\n  methods: {\n    /* ---------- 列表查询 ---------- */\n    async load(page = this.pageNum) {\n      this.pageNum = page;\n      const {\n        code,\n        data,\n        msg\n      } = await this.$request.get('/feedback/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          title: this.keyword\n        }\n      });\n      if (code === '200') {\n        this.tableData = data.list;\n        this.total = data.total;\n      } else {\n        this.$message.error(msg);\n      }\n    },\n    handleCurrentChange(page) {\n      this.load(page);\n    },\n    reset() {\n      this.keyword = '';\n      this.load(1);\n    },\n    /* ---------- 单条删除 ---------- */\n    del(id) {\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: 'warning'\n      }).then(() => this.$request.delete(`/feedback/delete/${id}`)).then(({\n        code,\n        msg\n      }) => {\n        code === '200' ? (this.$message.success('操作成功'), this.load(1)) : this.$message.error(msg);\n      }).catch(() => {});\n    },\n    /* ---------- 以下方法保持原逻辑(新增/编辑/批删) ---------- */\n    handleAdd() {\n      this.form = {};\n      this.fromVisible = true;\n    },\n    handleEdit(row) {\n      this.form = {\n        ...row\n      };\n      this.fromVisible = true;\n    },\n    async save() {\n      const valid = await this.$refs.formRef?.validate().catch(() => false);\n      if (!valid) return;\n      const url = this.form.id ? '/feedback/update' : '/feedback/add';\n      const method = this.form.id ? 'PUT' : 'POST';\n      const {\n        code,\n        msg\n      } = await this.$request({\n        url,\n        method,\n        data: this.form\n      });\n      code === '200' ? (this.$message.success('保存成功'), this.load(1), this.fromVisible = false) : this.$message.error(msg);\n    },\n    handleSelectionChange(rows) {\n      this.ids = rows.map(v => v.id);\n    },\n    async delBatch() {\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      const ok = await this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: 'warning'\n      }).catch(() => false);\n      if (!ok) return;\n      const {\n        code,\n        msg\n      } = await this.$request.delete('/feedback/delete/batch', {\n        data: this.ids\n      });\n      code === '200' ? (this.$message.success('操作成功'), this.load(1)) : this.$message.error(msg);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","keyword","$route","query","title","fromVisible","form","ids","user","JSON","parse","localStorage","getItem","created","load","methods","page","code","msg","$request","get","params","list","$message","error","handleCurrentChange","reset","del","id","$confirm","type","then","delete","success","catch","handleAdd","handleEdit","row","save","valid","$refs","formRef","validate","url","method","handleSelectionChange","rows","map","v","delBatch","length","warning","ok"],"sources":["src/views/front/UserFeedback.vue"],"sourcesContent":["<template>\n  <div class=\"feedback-page card\">\n    <!-- ▍查询栏 -->\n    <div class=\"search-bar\">\n      <el-input\n        v-model.trim=\"keyword\"\n        placeholder=\"请输入关键字查询\"\n        clearable\n        class=\"search-input\"\n        @keyup.enter.native=\"load(1)\"\n      />\n      <el-button type=\"info\" plain size=\"mini\" @click=\"load(1)\">查询</el-button>\n      <el-button type=\"warning\" plain size=\"mini\" @click=\"reset\">重置</el-button>\n    </div>\n\n    <!-- ▍列表 -->\n    <el-table\n      :data=\"tableData\"\n      stripe\n      border\n    >\n      <el-table-column prop=\"title\" label=\"主题\" />\n      <el-table-column prop=\"content\" label=\"内容\" />\n      <el-table-column prop=\"phone\" label=\"联系方式\" width=\"120\" />\n      <el-table-column prop=\"email\" label=\"邮箱\" width=\"160\" />\n      <el-table-column prop=\"reply\" label=\"回复\" />\n      <el-table-column prop=\"createtime\" label=\"创建时间\" width=\"160\" />\n      <el-table-column label=\"操作\" width=\"100\" align=\"center\">\n        <template #default=\"{ row }\">\n          <el-button\n            type=\"danger\"\n            size=\"mini\"\n            plain\n            @click=\"del(row.id)\"\n          >删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- ▍分页 -->\n    <el-pagination\n      v-if=\"total\"\n      class=\"pager\"\n      background\n      layout=\"total, prev, pager, next\"\n      :current-page=\"pageNum\"\n      :page-size=\"pageSize\"\n      :total=\"total\"\n      :page-sizes=\"[10, 20, 30]\"\n      @current-change=\"handleCurrentChange\"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'FrontFeedback',\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      keyword: this.$route.query.title || '', // 查询关键字\n      /* 以下保留原功能字段（新增/编辑）—— 兼容后端接口 */\n      fromVisible: false,\n      form: {},\n      ids: [],\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}')\n    }\n  },\n  created() {\n    this.load()\n  },\n  methods: {\n    /* ---------- 列表查询 ---------- */\n    async load(page = this.pageNum) {\n      this.pageNum = page\n      const { code, data, msg } = await this.$request.get('/feedback/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          title: this.keyword\n        }\n      })\n      if (code === '200') {\n        this.tableData = data.list\n        this.total = data.total\n      } else {\n        this.$message.error(msg)\n      }\n    },\n    handleCurrentChange(page) {\n      this.load(page)\n    },\n    reset() {\n      this.keyword = ''\n      this.load(1)\n    },\n\n    /* ---------- 单条删除 ---------- */\n    del(id) {\n      this.$confirm('您确定删除吗？', '确认删除', { type: 'warning' })\n        .then(() => this.$request.delete(`/feedback/delete/${id}`))\n        .then(({ code, msg }) => {\n          code === '200'\n            ? (this.$message.success('操作成功'), this.load(1))\n            : this.$message.error(msg)\n        })\n        .catch(() => {})\n    },\n\n    /* ---------- 以下方法保持原逻辑(新增/编辑/批删) ---------- */\n    handleAdd() {\n      this.form = {}\n      this.fromVisible = true\n    },\n    handleEdit(row) {\n      this.form = { ...row }\n      this.fromVisible = true\n    },\n    async save() {\n      const valid = await this.$refs.formRef?.validate().catch(() => false)\n      if (!valid) return\n      const url = this.form.id ? '/feedback/update' : '/feedback/add'\n      const method = this.form.id ? 'PUT' : 'POST'\n      const { code, msg } = await this.$request({ url, method, data: this.form })\n      code === '200'\n        ? (this.$message.success('保存成功'), this.load(1), (this.fromVisible = false))\n        : this.$message.error(msg)\n    },\n    handleSelectionChange(rows) {\n      this.ids = rows.map((v) => v.id)\n    },\n    async delBatch() {\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据')\n        return\n      }\n      const ok = await this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: 'warning'\n      }).catch(() => false)\n      if (!ok) return\n      const { code, msg } = await this.$request.delete('/feedback/delete/batch', {\n        data: this.ids\n      })\n      code === '200'\n        ? (this.$message.success('操作成功'), this.load(1))\n        : this.$message.error(msg)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.feedback-page {\n  width: 80%;\n  margin: 20px auto;\n}\n.search-bar {\n  margin-bottom: 14px;\n  display: flex;\n  align-items: center;\n}\n.search-input {\n  width: 200px;\n}\n.pager {\n  margin-top: 16px;\n  text-align: center;\n}\n</style>\n"],"mappings":"AAuDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;MACAC,OAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;MAAA;MACA;MACAC,WAAA;MACAC,IAAA;MACAC,GAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAD,KAAAE,IAAA,QAAAlB,OAAA;MACA,KAAAA,OAAA,GAAAkB,IAAA;MACA;QAAAC,IAAA;QAAArB,IAAA;QAAAsB;MAAA,eAAAC,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAvB,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA,QAAA;UACAK,KAAA,OAAAH;QACA;MACA;MACA,IAAAgB,IAAA;QACA,KAAApB,SAAA,GAAAD,IAAA,CAAA0B,IAAA;QACA,KAAAtB,KAAA,GAAAJ,IAAA,CAAAI,KAAA;MACA;QACA,KAAAuB,QAAA,CAAAC,KAAA,CAAAN,GAAA;MACA;IACA;IACAO,oBAAAT,IAAA;MACA,KAAAF,IAAA,CAAAE,IAAA;IACA;IACAU,MAAA;MACA,KAAAzB,OAAA;MACA,KAAAa,IAAA;IACA;IAEA;IACAa,IAAAC,EAAA;MACA,KAAAC,QAAA;QAAAC,IAAA;MAAA,GACAC,IAAA,YAAAZ,QAAA,CAAAa,MAAA,qBAAAJ,EAAA,KACAG,IAAA;QAAAd,IAAA;QAAAC;MAAA;QACAD,IAAA,cACA,KAAAM,QAAA,CAAAU,OAAA,eAAAnB,IAAA,OACA,KAAAS,QAAA,CAAAC,KAAA,CAAAN,GAAA;MACA,GACAgB,KAAA;IACA;IAEA;IACAC,UAAA;MACA,KAAA7B,IAAA;MACA,KAAAD,WAAA;IACA;IACA+B,WAAAC,GAAA;MACA,KAAA/B,IAAA;QAAA,GAAA+B;MAAA;MACA,KAAAhC,WAAA;IACA;IACA,MAAAiC,KAAA;MACA,MAAAC,KAAA,cAAAC,KAAA,CAAAC,OAAA,EAAAC,QAAA,GAAAR,KAAA;MACA,KAAAK,KAAA;MACA,MAAAI,GAAA,QAAArC,IAAA,CAAAsB,EAAA;MACA,MAAAgB,MAAA,QAAAtC,IAAA,CAAAsB,EAAA;MACA;QAAAX,IAAA;QAAAC;MAAA,eAAAC,QAAA;QAAAwB,GAAA;QAAAC,MAAA;QAAAhD,IAAA,OAAAU;MAAA;MACAW,IAAA,cACA,KAAAM,QAAA,CAAAU,OAAA,eAAAnB,IAAA,UAAAT,WAAA,YACA,KAAAkB,QAAA,CAAAC,KAAA,CAAAN,GAAA;IACA;IACA2B,sBAAAC,IAAA;MACA,KAAAvC,GAAA,GAAAuC,IAAA,CAAAC,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAApB,EAAA;IACA;IACA,MAAAqB,SAAA;MACA,UAAA1C,GAAA,CAAA2C,MAAA;QACA,KAAA3B,QAAA,CAAA4B,OAAA;QACA;MACA;MACA,MAAAC,EAAA,cAAAvB,QAAA;QACAC,IAAA;MACA,GAAAI,KAAA;MACA,KAAAkB,EAAA;MACA;QAAAnC,IAAA;QAAAC;MAAA,eAAAC,QAAA,CAAAa,MAAA;QACApC,IAAA,OAAAW;MACA;MACAU,IAAA,cACA,KAAAM,QAAA,CAAAU,OAAA,eAAAnB,IAAA,OACA,KAAAS,QAAA,CAAAC,KAAA,CAAAN,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}