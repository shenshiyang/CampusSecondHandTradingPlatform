{"ast":null,"code":"export default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      showEmojiPanel: false,\n      emojiList: ['üòä', 'üòÇ', 'ü§£', '‚ù§Ô∏è', 'üòç', 'üòí', 'üòò', 'üòÖ', 'üò≠', 'üòâ', 'üòé', 'ü§î', 'üò§', 'üò°', 'üò±', 'ü§Æ', 'ü§ë', 'ü§ù', 'üëç', 'üëé', 'üôè', 'üí™', 'üëÄ', 'üéâ']\n    };\n  },\n  mounted() {\n    const toUserId = this.$route.query.toUserId;\n    this.loadUserList().then(() => {\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        }\n      }\n    });\n    this.initWebSocket();\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  },\n  methods: {\n    initWebSocket() {\n      if (!this.user.id) return;\n      const wsUrl = `ws://${window.location.hostname}:9090/chatServer/${this.user.id}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocketËøûÊé•ÊàêÂäü');\n      };\n      this.ws.onmessage = e => {\n        console.log('Êî∂Âà∞Ê∂àÊÅØ:', e.data);\n        this.loadChatRecord();\n      };\n      this.ws.onerror = e => {\n        console.log('WebSocketÈîôËØØ:', e);\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocketËøûÊé•ÂÖ≥Èó≠');\n      };\n    },\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || 'ÂØπÊñπ';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.loadChatRecord();\n      // Ê†áËÆ∞Ê∂àÊÅØ‰∏∫Â∑≤ËØª\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data;\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    parseEmoji(text) {\n      if (!text) return '';\n      return text.replace(/\\[([^\\]]+)\\]/g, (match, p1) => {\n        if (this.emojiList.includes(p1)) {\n          return p1;\n        }\n        return match;\n      });\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmojiPanel = false;\n    },\n    beforeFileUpload(file) {\n      const maxSize = 100 * 1024 * 1024; // 100MB\n      if (file.size > maxSize) {\n        this.$message.error('Êñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá100MB');\n        return false;\n      }\n      return true;\n    },\n    handleFileSuccess(res) {\n      if (res.code === '200') {\n        const fileUrl = res;\n        const fileName = fileUrl.substring(fileUrl.lastIndexOf('/') + 1);\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: `[Êñá‰ª∂]${fileName}|${fileUrl}`,\n          isread: 'Âê¶'\n        };\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.loadChatRecord();\n          }\n        });\n      } else {\n        this.$message.error('Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•');\n      }\n    },\n    downloadFile(text) {\n      const parts = text.split('|');\n      if (parts.length === 2) {\n        window.open(parts[1]);\n      }\n    },\n    send() {\n      if (!this.content.trim()) return;\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        isread: 'Âê¶'\n      };\n      this.$request.post('/chatInfo/add', msg).then(res => {\n        if (res.code === '200') {\n          this.content = '';\n          this.loadChatRecord();\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","userList","chatList","chatTitle","active","content","activeUserAvatar","showEmojiPanel","emojiList","mounted","toUserId","$route","query","loadUserList","then","target","find","u","chatUserId","changeChatUser","initWebSocket","beforeDestroy","ws","close","methods","id","wsUrl","window","location","hostname","WebSocket","onopen","console","log","onmessage","e","loadChatRecord","onerror","onclose","$request","get","res","code","item","chatUserName","chatUserAvatar","put","$nextTick","box","$refs","chatBox","scrollTop","scrollHeight","parseEmoji","text","replace","match","p1","includes","insertEmoji","emoji","beforeFileUpload","file","maxSize","size","$message","error","handleFileSuccess","fileUrl","fileName","substring","lastIndexOf","msg","userId","isread","post","downloadFile","parts","split","length","open","send","trim"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <div class=\"chat-user-list\">\n      <div\n        v-for=\"item in userList\"\n        :key=\"item.chatUserId\"\n        :class=\"['chat-user', item.chatUserId === active ? 'active' : '']\"\n        @click=\"changeChatUser(item)\">\n        <img :src=\"item.chatUserAvatar\" alt=\"\">\n        <div class=\"user-info\">\n          <span class=\"user-name\">{{ item.chatUserName }}</span>\n          <span class=\"unread\" v-if=\"item.chatNum > 0\">{{ item.chatNum }}</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-main\">\n      <div class=\"chat-title\">{{ chatTitle }}</div>\n\n      <div class=\"chat-box\" ref=\"chatBox\">\n        <div\n          v-for=\"(item, index) in chatList\"\n          :key=\"index\"\n          :class=\"['msg-box', item.userId === user.id ? 'right' : 'left']\">\n          <img\n            class=\"avatar\"\n            :src=\"item.userId === user.id ? user.avatar : activeUserAvatar\"\n            alt=\"Â§¥ÂÉè\">\n          <div class=\"msg-content\" v-if=\"!item.text.startsWith('[Êñá‰ª∂]')\" v-html=\"parseEmoji(item.text)\"></div>\n          <div class=\"msg-content file-content\" v-else>\n            <div class=\"file-info\" @click=\"downloadFile(item.text)\">\n              <i class=\"el-icon-document\"></i>\n              <span>{{ item.text.replace('[Êñá‰ª∂]', '') }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-toolbar\">\n        <div class=\"toolbar-left\">\n          <i class=\"el-icon-smile\" @click=\"showEmojiPanel = !showEmojiPanel\"></i>\n          <el-upload\n            class=\"file-upload\"\n            action=\"/files/upload\"\n            :show-file-list=\"false\"\n            :before-upload=\"beforeFileUpload\"\n            :on-success=\"handleFileSuccess\">\n            <i class=\"el-icon-folder\"></i>\n          </el-upload>\n        </div>\n        \n        <!-- Ë°®ÊÉÖÈù¢Êùø -->\n        <div class=\"emoji-panel\" v-show=\"showEmojiPanel\">\n          <div class=\"emoji-list\">\n            <span\n              v-for=\"(emoji, index) in emojiList\"\n              :key=\"index\"\n              class=\"emoji-item\"\n              @click=\"insertEmoji(emoji)\">\n              {{ emoji }}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <el-input \n          v-model=\"content\" \n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"ËØ∑ËæìÂÖ•ËÅäÂ§©ÂÜÖÂÆπ\" \n          @keyup.ctrl.enter.native=\"send\"\n          resize=\"none\" />\n        <el-button type=\"primary\" @click=\"send\">ÂèëÈÄÅ</el-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      showEmojiPanel: false,\n      emojiList: ['üòä', 'üòÇ', 'ü§£', '‚ù§Ô∏è', 'üòç', 'üòí', 'üòò', 'üòÖ', 'üò≠', 'üòâ', 'üòé', 'ü§î', 'üò§', 'üò°', 'üò±', 'ü§Æ', 'ü§ë', 'ü§ù', 'üëç', 'üëé', 'üôè', 'üí™', 'üëÄ', 'üéâ']\n    }\n  },\n  mounted() {\n    const toUserId = this.$route.query.toUserId;\n    this.loadUserList().then(() => {\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        }\n      }\n    });\n    this.initWebSocket();\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  },\n  methods: {\n    initWebSocket() {\n      if (!this.user.id) return;\n      const wsUrl = `ws://${window.location.hostname}:9090/chatServer/${this.user.id}`;\n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocketËøûÊé•ÊàêÂäü');\n      };\n      \n      this.ws.onmessage = (e) => {\n        console.log('Êî∂Âà∞Ê∂àÊÅØ:', e.data);\n        this.loadChatRecord();\n      };\n      \n      this.ws.onerror = (e) => {\n        console.log('WebSocketÈîôËØØ:', e);\n      };\n      \n      this.ws.onclose = () => {\n        console.log('WebSocketËøûÊé•ÂÖ≥Èó≠');\n      };\n    },\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || 'ÂØπÊñπ';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.loadChatRecord();\n      // Ê†áËÆ∞Ê∂àÊÅØ‰∏∫Â∑≤ËØª\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data;\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    parseEmoji(text) {\n      if (!text) return '';\n      return text.replace(/\\[([^\\]]+)\\]/g, (match, p1) => {\n        if (this.emojiList.includes(p1)) {\n          return p1;\n        }\n        return match;\n      });\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmojiPanel = false;\n    },\n    beforeFileUpload(file) {\n      const maxSize = 100 * 1024 * 1024; // 100MB\n      if (file.size > maxSize) {\n        this.$message.error('Êñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá100MB');\n        return false;\n      }\n      return true;\n    },\n    handleFileSuccess(res) {\n      if (res.code === '200') {\n        const fileUrl = res;\n        const fileName = fileUrl.substring(fileUrl.lastIndexOf('/') + 1);\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: `[Êñá‰ª∂]${fileName}|${fileUrl}`,\n          isread: 'Âê¶'\n        };\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.loadChatRecord();\n          }\n        });\n      } else {\n        this.$message.error('Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•');\n      }\n    },\n    downloadFile(text) {\n      const parts = text.split('|');\n      if (parts.length === 2) {\n        window.open(parts[1]);\n      }\n    },\n    send() {\n      if (!this.content.trim()) return;\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        isread: 'Âê¶'\n      };\n      this.$request.post('/chatInfo/add', msg).then(res => {\n        if (res.code === '200') {\n          this.content = '';\n          this.loadChatRecord();\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  height: 85vh;\n  background: #fff;\n  box-shadow: 0 0 6px #ddd;\n  margin: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n}\n.chat-user-list {\n  width: 220px;\n  border-right: 1px solid #eee;\n  overflow-y: auto;\n}\n.chat-user {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n.chat-user:hover,\n.chat-user.active {\n  background-color: #f0f7ff;\n}\n.chat-user img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n  object-fit: cover;\n}\n.user-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n.user-name {\n  font-size: 14px;\n  color: #333;\n  margin-bottom: 4px;\n}\n.unread {\n  background: #f56c6c;\n  color: #fff;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 12px;\n  align-self: flex-start;\n}\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n.chat-title {\n  height: 50px;\n  line-height: 50px;\n  padding-left: 20px;\n  border-bottom: 1px solid #eee;\n  font-weight: bold;\n  background: #f8f9fa;\n}\n.chat-box {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background: #f5f7fa;\n}\n.chat-toolbar {\n  padding: 10px;\n  border-top: 1px solid #eee;\n  position: relative;\n  background: #fff;\n}\n.toolbar-left {\n  display: flex;\n  gap: 15px;\n}\n.toolbar-left i {\n  font-size: 20px;\n  color: #666;\n  cursor: pointer;\n  transition: color 0.3s;\n}\n.toolbar-left i:hover {\n  color: #409EFF;\n}\n.emoji-panel {\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  background: white;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n}\n.emoji-list {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  gap: 8px;\n  padding: 10px;\n  background: #fff;\n  border-radius: 4px;\n}\n.emoji-item {\n  font-size: 20px;\n  cursor: pointer;\n  text-align: center;\n  padding: 5px;\n  transition: transform 0.2s;\n  user-select: none;\n}\n.emoji-item:hover {\n  transform: scale(1.2);\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n.chat-input {\n  padding: 15px;\n  border-top: 1px solid #eee;\n  background: #fff;\n}\n.chat-input .el-textarea {\n  margin-bottom: 10px;\n}\n.chat-input .el-button {\n  float: right;\n}\n.file-upload {\n  display: inline-block;\n}\n.file-upload i {\n  font-size: 20px;\n  color: #666;\n  cursor: pointer;\n}\n.file-upload i:hover {\n  color: #409EFF;\n}\n.msg-box {\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 20px;\n}\n.msg-box.left {\n  flex-direction: row;\n}\n.msg-box.right {\n  flex-direction: row-reverse;\n}\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin: 0 10px;\n  object-fit: cover;\n}\n.msg-content {\n  background: #fff;\n  padding: 10px 15px;\n  border-radius: 4px;\n  max-width: 60%;\n  word-wrap: break-word;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n.msg-box.right .msg-content {\n  background: #e3f2fd;\n}\n.file-content {\n  padding: 8px !important;\n}\n.file-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n.file-info:hover {\n  background-color: #f5f5f5;\n}\n.file-info i {\n  font-size: 24px;\n  color: #409EFF;\n}\n.file-info span {\n  color: #409EFF;\n  text-decoration: underline;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}