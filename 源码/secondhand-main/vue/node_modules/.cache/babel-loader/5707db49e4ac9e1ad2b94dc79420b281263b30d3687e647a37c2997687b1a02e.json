{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"FrontLayout\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\n      menus: [{\n        text: '热卖专区',\n        path: '/front/home'\n      }, {\n        text: '校园广场',\n        path: '/front/posts'\n      }, {\n        text: '求助专区',\n        path: '/front/help'\n      }, {\n        text: '系统公告',\n        path: '/front/notice'\n      }, {\n        text: '留言反馈',\n        path: '/front/feedback'\n      }],\n      totalUnreadCount: 0,\n      ws: null,\n      processedMessageIds: new Set(),\n      activeNotifications: new Set(),\n      // AI客服相关\n      aiDialogVisible: false,\n      aiInputMessage: '',\n      aiMessages: [],\n      aiLoading: false,\n      aiHistoryLoading: false,\n      aiHistoryPage: 1,\n      aiHistorySize: 20,\n      aiHistoryTotal: 0\n    };\n  },\n  mounted() {\n    if (this.user.id) {\n      this.getUnreadCount();\n      this.initWebSocket();\n    }\n  },\n  beforeDestroy() {\n    this.closeWebSocket();\n    this.processedMessageIds.clear();\n    this.activeNotifications.clear();\n  },\n  methods: {\n    showNotification(data) {\n      const notificationId = `${data.fromUserId}-${data.timestamp}`;\n      if (this.activeNotifications.has(notificationId)) {\n        console.log('通知已在显示中，跳过:', notificationId);\n        return;\n      }\n      this.activeNotifications.add(notificationId);\n      const h = this.$createElement;\n      const notification = this.$notify({\n        title: '新消息提醒',\n        message: h('div', {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            cursor: 'pointer'\n          },\n          on: {\n            click: () => {\n              this.$router.push({\n                path: '/front/chat',\n                query: {\n                  toUserId: data.fromUserId\n                }\n              });\n              this.activeNotifications.delete(notificationId);\n              notification.close();\n            }\n          }\n        }, [h('img', {\n          style: {\n            width: '30px',\n            height: '30px',\n            borderRadius: '50%',\n            marginRight: '8px'\n          },\n          attrs: {\n            src: data.fromUserAvatar\n          }\n        }), h('div', [h('div', {\n          style: {\n            fontWeight: 'bold'\n          }\n        }, data.fromUserName), h('div', {\n          style: {\n            color: '#666'\n          }\n        }, data.content)])]),\n        type: 'success',\n        duration: 5000,\n        position: 'bottom-right',\n        onClose: () => {\n          this.activeNotifications.delete(notificationId);\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      this.closeWebSocket();\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsPort = '9090';\n      const wsUrl = `${protocol}//${window.location.hostname}:${wsPort}/chatServer/${this.user.id}`;\n      console.log('正在连接WebSocket:', wsUrl);\n      try {\n        this.ws = new WebSocket(wsUrl);\n        this.ws.onopen = () => {\n          console.log('WebSocket连接成功');\n          this.getUnreadCount();\n        };\n        this.ws.onmessage = e => {\n          try {\n            const data = JSON.parse(e.data);\n            if (data.type === 'chat' && data.toUserId === this.user.id) {\n              const messageId = `${data.fromUserId}-${data.timestamp}`;\n              if (this.processedMessageIds.has(messageId)) {\n                console.log('跳过重复消息:', messageId);\n                return;\n              }\n              this.processedMessageIds.add(messageId);\n              if (this.processedMessageIds.size > 100) {\n                const idsArray = Array.from(this.processedMessageIds);\n                this.processedMessageIds = new Set(idsArray.slice(-50));\n              }\n              this.getUnreadCount();\n              this.showNotification(data);\n            }\n          } catch (error) {\n            console.error('解析WebSocket消息失败:', error);\n          }\n        };\n        this.ws.onclose = () => {\n          console.log('WebSocket连接关闭');\n          setTimeout(() => {\n            this.initWebSocket();\n          }, 3000);\n        };\n        this.ws.onerror = () => {\n          console.error('WebSocket连接错误');\n          this.closeWebSocket();\n        };\n      } catch (error) {\n        console.error('创建WebSocket连接失败:', error);\n        this.$message.error('连接聊天服务失败');\n      }\n    },\n    closeWebSocket() {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n    },\n    getUnreadCount() {\n      this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.totalUnreadCount = res.data.reduce((total, chat) => total + (chat.chatNum || 0), 0);\n          console.log('更新未读消息总数:', this.totalUnreadCount);\n        }\n      });\n    },\n    updateUser() {\n      this.user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}');\n      if (this.user.id) {\n        this.getUnreadCount();\n        this.initWebSocket();\n      } else {\n        this.closeWebSocket();\n      }\n    },\n    handleChatClick() {\n      this.totalUnreadCount = 0;\n      this.$router.push('/front/chat');\n    },\n    handleAIClick() {\n      this.aiDialogVisible = true;\n      this.aiHistoryPage = 1;\n      this.aiHistoryTotal = 0;\n      if (this.aiMessages.length === 0) {\n        this.aiMessages.push({\n          type: 'ai',\n          content: '您好！我是前湖集市的AI客服，有什么可以帮您的吗？'\n        });\n      }\n    },\n    sendAIMessage() {\n      if (!this.aiInputMessage.trim()) return;\n\n      // 添加用户消息\n      this.aiMessages.push({\n        type: 'user',\n        content: this.aiInputMessage\n      });\n      const userMessage = this.aiInputMessage;\n      this.aiInputMessage = '';\n      this.aiLoading = true;\n\n      // 滚动到底部\n      this.$nextTick(() => {\n        this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n      });\n\n      // 发送请求\n      this.$request.post('/aiChat/chat', {\n        message: userMessage,\n        mode: 'chat',\n        userId: this.user.id || 1\n      }).then(res => {\n        this.aiLoading = false;\n        if (res.code === '200') {\n          this.aiMessages.push({\n            type: 'ai',\n            content: res.data.response\n          });\n          // 滚动到底部\n          this.$nextTick(() => {\n            this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n          });\n        } else {\n          this.$message.error('获取AI回复失败');\n        }\n      }).catch(err => {\n        this.aiLoading = false;\n        console.error(err);\n        this.$message.error('获取AI回复失败');\n      });\n    },\n    logout() {\n      localStorage.removeItem(\"xm-user\");\n      this.$router.push(\"/login\");\n    },\n    async loadAIHistory() {\n      if (!this.user.id) return;\n      this.aiHistoryLoading = true;\n      try {\n        const res = await this.$request.get('/aiChat/history', {\n          params: {\n            userId: this.user.id,\n            page: this.aiHistoryPage,\n            size: this.aiHistorySize\n          }\n        });\n        if (res.code === '200') {\n          const history = (res.data.records || []).map(item => ({\n            type: item.sender,\n            content: item.content,\n            time: item.createTime\n          }));\n          this.aiMessages = history.concat(this.aiMessages);\n          this.aiHistoryTotal = res.data.total;\n          this.aiHistoryPage += 1;\n        } else {\n          this.$message.error('加载历史聊天记录失败');\n        }\n      } catch (e) {\n        this.$message.error('加载历史聊天记录失败');\n      }\n      this.aiHistoryLoading = false;\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","menus","text","path","totalUnreadCount","ws","processedMessageIds","Set","activeNotifications","aiDialogVisible","aiInputMessage","aiMessages","aiLoading","aiHistoryLoading","aiHistoryPage","aiHistorySize","aiHistoryTotal","mounted","id","getUnreadCount","initWebSocket","beforeDestroy","closeWebSocket","clear","methods","showNotification","notificationId","fromUserId","timestamp","has","console","log","add","h","$createElement","notification","$notify","title","message","style","display","alignItems","cursor","on","click","$router","push","query","toUserId","delete","close","width","height","borderRadius","marginRight","attrs","src","fromUserAvatar","fontWeight","fromUserName","color","content","type","duration","position","onClose","WebSocket","$message","error","protocol","window","location","wsPort","wsUrl","hostname","onopen","onmessage","e","messageId","size","idsArray","Array","from","slice","onclose","setTimeout","onerror","$request","get","then","res","code","reduce","total","chat","chatNum","updateUser","handleChatClick","handleAIClick","length","sendAIMessage","trim","userMessage","$nextTick","$refs","chatMessages","scrollTop","scrollHeight","post","mode","userId","response","catch","err","logout","removeItem","loadAIHistory","params","page","history","records","map","item","sender","time","createTime","concat"],"sources":["src/views/Front.vue"],"sourcesContent":["<template>\n  <div class=\"front-container\">\n    <!-- 顶部导航 -->\n    <div class=\"front-header\">\n      <!-- 左侧 LOGO -->\n      <a href=\"/front/home\" class=\"front-header-left\">\n        <img src=\"@/assets/imgs/logo.png\" class=\"logo\" alt=\"logo\" />\n        <div class=\"title\">前湖集市</div>\n      </a>\n\n      <!-- 中间菜单 -->\n      <div class=\"front-header-center\">\n        <div\n          v-for=\"item in menus\"\n          :key=\"item.path\"\n          class=\"menu\"\n          :class=\"{ 'menu-active': item.path === $route.path }\"\n          @click=\"$router.push(item.path)\"\n        >\n          {{ item.text }}\n        </div>\n      </div>\n\n      <!-- 聊天消息 -->\n      <div class=\"front-header-chat\" @click=\"handleChatClick\">\n        <i class=\"el-icon-chat-dot-round\" style=\"margin-right: 4px\"></i> 聊天消息\n        <div v-if=\"totalUnreadCount > 0\" class=\"unread-badge\">{{ totalUnreadCount }}</div>\n      </div>\n\n      <!-- AI客服 -->\n      <div class=\"front-header-ai\" @click=\"handleAIClick\">\n        <i class=\"el-icon-service\" style=\"margin-right: 4px\"></i> AI客服\n      </div>\n\n      <!-- 右侧用户 -->\n      <div class=\"front-header-right\">\n        <template v-if=\"!user.username\">\n          <el-button type=\"text\" @click=\"$router.push('/login')\">登录</el-button>\n          <el-button type=\"text\" @click=\"$router.push('/register')\">注册</el-button>\n        </template>\n        <template v-else>\n          <el-dropdown>\n            <div class=\"user-info\">\n              <div class=\"avatar-wrapper\">\n                <img :src=\"user.avatar\" class=\"avatar\" alt=\"用户头像\" />\n              </div>\n              <span>{{ user.name }}</span>\n              <i class=\"el-icon-arrow-down\" style=\"margin-left: 4px\"></i>\n            </div>\n            <el-dropdown-menu slot=\"dropdown\">\n              <el-dropdown-item @click.native=\"$router.push('/front/orders')\">我的订单</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/goods')\">我的商品</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/userPosts')\">我的发帖</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/userHelp')\">我的求助</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/userFeedback')\">我的反馈</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/address')\">我的地址</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/person')\">个人信息</el-dropdown-item>\n              <el-dropdown-item @click.native=\"$router.push('/front/collect')\">我的收藏</el-dropdown-item>\n              <el-dropdown-item @click.native=\"logout\">退出登录</el-dropdown-item>\n            </el-dropdown-menu>\n          </el-dropdown>\n        </template>\n      </div>\n    </div>\n\n    <!-- 主体内容 -->\n    <div class=\"main-body\">\n      <router-view ref=\"child\" @update:user=\"updateUser\" />\n    </div>\n\n    <!-- AI客服对话框 -->\n    <el-dialog\n      title=\"AI客服\"\n      :visible.sync=\"aiDialogVisible\"\n      width=\"700px\"\n      :close-on-click-modal=\"false\"\n      custom-class=\"ai-dialog\"\n    >\n      <div class=\"ai-chat-container\">\n        <div class=\"ai-chat-messages\" ref=\"chatMessages\">\n          <div class=\"ai-history-btn-wrapper\">\n            <el-button\n              size=\"mini\"\n              @click=\"loadAIHistory\"\n              :loading=\"aiHistoryLoading\"\n              :disabled=\"aiMessages.length >= aiHistoryTotal && aiHistoryTotal > 0\"\n            >\n              查看历史聊天记录\n            </el-button>\n          </div>\n          <div v-for=\"(msg, index) in aiMessages\" :key=\"index\" :class=\"['message', msg.type]\">\n            <div class=\"avatar\">\n              <img :src=\"msg.type === 'user' ? user.avatar : 'https://api.dicebear.com/7.x/bottts/svg?seed=ai-assistant'\" alt=\"avatar\">\n            </div>\n            <div class=\"content\">\n              {{ msg.content }}\n              <div v-if=\"msg.time\" class=\"msg-time\">{{ msg.time | dateFormat }}</div>\n            </div>\n          </div>\n          <div v-if=\"aiLoading\" class=\"ai-loading\">\n            <i class=\"el-icon-loading\"></i> AI客服正在思考中...\n          </div>\n        </div>\n        <div class=\"ai-chat-input\">\n          <el-input\n            v-model=\"aiInputMessage\"\n            placeholder=\"请输入您的问题...\"\n            @keyup.enter.native=\"sendAIMessage\"\n          >\n            <el-button slot=\"append\" icon=\"el-icon-position\" @click=\"sendAIMessage\"></el-button>\n          </el-input>\n        </div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"FrontLayout\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\n      menus: [\n        { text: '热卖专区', path: '/front/home' },\n        { text: '校园广场', path: '/front/posts' },\n        { text: '求助专区', path: '/front/help' },\n        { text: '系统公告', path: '/front/notice' },\n        { text: '留言反馈', path: '/front/feedback' },\n      ],\n      totalUnreadCount: 0,\n      ws: null,\n      processedMessageIds: new Set(),\n      activeNotifications: new Set(),\n      // AI客服相关\n      aiDialogVisible: false,\n      aiInputMessage: '',\n      aiMessages: [],\n      aiLoading: false,\n      aiHistoryLoading: false,\n      aiHistoryPage: 1,\n      aiHistorySize: 20,\n      aiHistoryTotal: 0,\n    }\n  },\n  mounted() {\n    if (this.user.id) {\n      this.getUnreadCount();\n      this.initWebSocket();\n    }\n  },\n  beforeDestroy() {\n    this.closeWebSocket();\n    this.processedMessageIds.clear();\n    this.activeNotifications.clear();\n  },\n  methods: {\n    showNotification(data) {\n      const notificationId = `${data.fromUserId}-${data.timestamp}`;\n      \n      if (this.activeNotifications.has(notificationId)) {\n        console.log('通知已在显示中，跳过:', notificationId);\n        return;\n      }\n      \n      this.activeNotifications.add(notificationId);\n      \n      const h = this.$createElement;\n      const notification = this.$notify({\n        title: '新消息提醒',\n        message: h('div', { \n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            cursor: 'pointer'\n          },\n          on: {\n            click: () => {\n              this.$router.push({\n                path: '/front/chat',\n                query: { toUserId: data.fromUserId }\n              });\n              this.activeNotifications.delete(notificationId);\n              notification.close();\n            }\n          }\n        }, [\n          h('img', {\n            style: {\n              width: '30px',\n              height: '30px',\n              borderRadius: '50%',\n              marginRight: '8px'\n            },\n            attrs: {\n              src: data.fromUserAvatar\n            }\n          }),\n          h('div', [\n            h('div', { style: { fontWeight: 'bold' } }, data.fromUserName),\n            h('div', { style: { color: '#666' } }, data.content)\n          ])\n        ]),\n        type: 'success',\n        duration: 5000,\n        position: 'bottom-right',\n        onClose: () => {\n          this.activeNotifications.delete(notificationId);\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      this.closeWebSocket();\n      \n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsPort = '9090';\n      const wsUrl = `${protocol}//${window.location.hostname}:${wsPort}/chatServer/${this.user.id}`;\n      \n      console.log('正在连接WebSocket:', wsUrl);\n      \n      try {\n        this.ws = new WebSocket(wsUrl);\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket连接成功');\n          this.getUnreadCount();\n        };\n        \n        this.ws.onmessage = (e) => {\n          try {\n            const data = JSON.parse(e.data);\n            if (data.type === 'chat' && data.toUserId === this.user.id) {\n              const messageId = `${data.fromUserId}-${data.timestamp}`;\n              \n              if (this.processedMessageIds.has(messageId)) {\n                console.log('跳过重复消息:', messageId);\n                return;\n              }\n              \n              this.processedMessageIds.add(messageId);\n              \n              if (this.processedMessageIds.size > 100) {\n                const idsArray = Array.from(this.processedMessageIds);\n                this.processedMessageIds = new Set(idsArray.slice(-50));\n              }\n\n              this.getUnreadCount();\n              \n              this.showNotification(data);\n            }\n          } catch (error) {\n            console.error('解析WebSocket消息失败:', error);\n          }\n        };\n        \n        this.ws.onclose = () => {\n          console.log('WebSocket连接关闭');\n          setTimeout(() => {\n            this.initWebSocket();\n          }, 3000);\n        };\n        \n        this.ws.onerror = () => {\n          console.error('WebSocket连接错误');\n          this.closeWebSocket();\n        };\n      } catch (error) {\n        console.error('创建WebSocket连接失败:', error);\n        this.$message.error('连接聊天服务失败');\n      }\n    },\n    closeWebSocket() {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n    },\n    getUnreadCount() {\n      this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.totalUnreadCount = res.data.reduce((total, chat) => total + (chat.chatNum || 0), 0);\n          console.log('更新未读消息总数:', this.totalUnreadCount);\n        }\n      });\n    },\n    updateUser() {\n      this.user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}');\n      if (this.user.id) {\n        this.getUnreadCount();\n        this.initWebSocket();\n      } else {\n        this.closeWebSocket();\n      }\n    },\n    handleChatClick() {\n      this.totalUnreadCount = 0;\n      this.$router.push('/front/chat');\n    },\n    handleAIClick() {\n      this.aiDialogVisible = true;\n      this.aiHistoryPage = 1;\n      this.aiHistoryTotal = 0;\n      if (this.aiMessages.length === 0) {\n        this.aiMessages.push({\n          type: 'ai',\n          content: '您好！我是前湖集市的AI客服，有什么可以帮您的吗？'\n        });\n      }\n    },\n    sendAIMessage() {\n      if (!this.aiInputMessage.trim()) return;\n      \n      // 添加用户消息\n      this.aiMessages.push({\n        type: 'user',\n        content: this.aiInputMessage\n      });\n      \n      const userMessage = this.aiInputMessage;\n      this.aiInputMessage = '';\n      this.aiLoading = true;\n      \n      // 滚动到底部\n      this.$nextTick(() => {\n        this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n      });\n      \n      // 发送请求\n      this.$request.post('/aiChat/chat', {\n        message: userMessage,\n        mode: 'chat',\n        userId: this.user.id || 1\n      }).then(res => {\n        this.aiLoading = false;\n        if (res.code === '200') {\n          this.aiMessages.push({\n            type: 'ai',\n            content: res.data.response\n          });\n          // 滚动到底部\n          this.$nextTick(() => {\n            this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;\n          });\n        } else {\n          this.$message.error('获取AI回复失败');\n        }\n      }).catch(err => {\n        this.aiLoading = false;\n        console.error(err);\n        this.$message.error('获取AI回复失败');\n      });\n    },\n    logout() {\n      localStorage.removeItem(\"xm-user\")\n      this.$router.push(\"/login\")\n    },\n    async loadAIHistory() {\n      if (!this.user.id) return;\n      this.aiHistoryLoading = true;\n      try {\n        const res = await this.$request.get('/aiChat/history', {\n          params: {\n            userId: this.user.id,\n            page: this.aiHistoryPage,\n            size: this.aiHistorySize\n          }\n        });\n        if (res.code === '200') {\n          const history = (res.data.records || []).map(item => ({\n            type: item.sender,\n            content: item.content,\n            time: item.createTime\n          }));\n          this.aiMessages = history.concat(this.aiMessages);\n          this.aiHistoryTotal = res.data.total;\n          this.aiHistoryPage += 1;\n        } else {\n          this.$message.error('加载历史聊天记录失败');\n        }\n      } catch (e) {\n        this.$message.error('加载历史聊天记录失败');\n      }\n      this.aiHistoryLoading = false;\n    },\n  }\n}\n</script>\n\n<style scoped>\n.front-container {\n  background-color: #f5f7fa;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.front-header {\n  display: flex;\n  align-items: center;\n  background: linear-gradient(135deg, #40a9ff 0%, #1d39c4 100%);\n  color: white;\n  height: 64px;\n  padding: 0 50px;\n  justify-content: space-between;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  position: sticky;\n  top: 0;\n  z-index: 1000;\n}\n\n.front-header-left {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  transition: all 0.3s;\n  padding: 6px 12px;\n  border-radius: 8px;\n}\n\n.front-header-left:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateY(-1px);\n}\n\n.front-header-left .logo {\n  width: 36px;\n  height: 36px;\n  margin-right: 12px;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  transition: all 0.3s;\n}\n\n.front-header-left:hover .logo {\n  transform: rotate(5deg);\n}\n\n.front-header-left .title {\n  font-size: 22px;\n  font-weight: bold;\n  color: #fff;\n  letter-spacing: 0.5px;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.front-header-center {\n  display: flex;\n  gap: 8px;\n  margin: 0 40px;\n  flex-grow: 1;\n  justify-content: center;\n  position: relative;\n}\n\n.menu {\n  cursor: pointer;\n  font-size: 15px;\n  color: rgba(255, 255, 255, 0.85);\n  transition: all 0.3s;\n  padding: 8px 20px;\n  border-radius: 20px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.menu::before {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  width: 0;\n  height: 2px;\n  background-color: #fff;\n  transition: all 0.3s;\n  transform: translateX(-50%);\n  opacity: 0;\n}\n\n.menu:hover::before,\n.menu-active::before {\n  width: 80%;\n  opacity: 1;\n}\n\n.menu:hover {\n  color: #fff;\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateY(-1px);\n}\n\n.menu-active {\n  color: #fff;\n  background: rgba(255, 255, 255, 0.15);\n  font-weight: 500;\n}\n\n.front-header-chat {\n  font-size: 15px;\n  cursor: pointer;\n  color: rgba(255, 255, 255, 0.85);\n  margin-right: 25px;\n  display: flex;\n  align-items: center;\n  padding: 8px 16px;\n  border-radius: 20px;\n  transition: all 0.3s;\n  background: rgba(255, 255, 255, 0.1);\n  position: relative;\n}\n\n.front-header-chat:hover {\n  color: #fff;\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-1px);\n}\n\n.front-header-chat i {\n  margin-right: 6px;\n  font-size: 18px;\n}\n\n.front-header-ai {\n  font-size: 15px;\n  cursor: pointer;\n  color: rgba(255, 255, 255, 0.85);\n  margin-right: 25px;\n  display: flex;\n  align-items: center;\n  padding: 8px 16px;\n  border-radius: 20px;\n  transition: all 0.3s;\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.front-header-ai:hover {\n  color: #fff;\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-1px);\n}\n\n.front-header-ai i {\n  margin-right: 6px;\n  font-size: 18px;\n}\n\n.front-header-right {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.front-header-right :deep(.el-button--text) {\n  color: rgba(255, 255, 255, 0.85);\n  font-size: 15px;\n  padding: 8px 16px;\n  transition: all 0.3s;\n  height: auto;\n  border-radius: 20px;\n}\n\n.front-header-right :deep(.el-button--text:hover) {\n  color: #fff;\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateY(-1px);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  padding: 6px 16px;\n  border-radius: 20px;\n  transition: all 0.3s;\n  background: rgba(255, 255, 255, 0.1);\n  gap: 8px;\n}\n\n.user-info:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-1px);\n}\n\n.user-info .avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  transition: all 0.3s;\n  object-fit: cover;\n}\n\n.user-info:hover .avatar {\n  border-color: rgba(255, 255, 255, 0.4);\n  transform: scale(1.05);\n}\n\n.user-info span {\n  font-size: 15px;\n  color: #fff;\n}\n\n.user-info i {\n  font-size: 14px;\n  transition: all 0.3s;\n}\n\n.user-info:hover i {\n  transform: rotate(180deg);\n}\n\n.main-body {\n  padding: 24px;\n  flex: 1;\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n:deep(.el-dropdown-menu) {\n  padding: 8px;\n  border-radius: 12px;\n  box-shadow: 0 3px 15px rgba(0, 0, 0, 0.1);\n  border: none;\n}\n\n:deep(.el-dropdown-menu__item) {\n  padding: 10px 20px;\n  font-size: 14px;\n  border-radius: 6px;\n  margin: 2px 0;\n  transition: all 0.3s;\n}\n\n:deep(.el-dropdown-menu__item:hover) {\n  background-color: #f0f7ff;\n  color: #1890ff;\n  transform: translateX(4px);\n}\n\n:deep(.el-dropdown-menu__item i) {\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n.avatar-wrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.avatar-badge {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  z-index: 1;\n}\n\n.unread-badge {\n  position: absolute;\n  background-color: #ff4d4f;\n  color: white;\n  font-size: 12px;\n  padding: 0 6px;\n  height: 18px;\n  min-width: 18px;\n  border-radius: 9px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  box-shadow: 0 2px 6px rgba(255, 77, 79, 0.4);\n  animation: badge-pop 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n@keyframes badge-pop {\n  from {\n    transform: scale(0);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.ai-chat-container {\n  height: 600px;\n  display: flex;\n  flex-direction: column;\n}\n\n.ai-chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  background: #f5f7fa;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.message {\n  display: flex;\n  margin-bottom: 20px;\n}\n\n.message.user {\n  flex-direction: row-reverse;\n}\n\n.message .avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  overflow: hidden;\n  margin: 0 10px;\n}\n\n.message .avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.message .content {\n  max-width: 70%;\n  padding: 12px 16px;\n  border-radius: 8px;\n  background: #fff;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.message.user .content {\n  background: #e6f7ff;\n}\n\n.ai-chat-input {\n  padding: 0 20px;\n}\n\n:deep(.ai-dialog .el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.ai-dialog .el-dialog__header) {\n  padding: 20px;\n  border-bottom: 1px solid #ebeef5;\n}\n\n:deep(.ai-dialog .el-dialog__title) {\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.ai-loading {\n  text-align: center;\n  color: #1890ff;\n  font-size: 16px;\n  margin-top: 10px;\n  animation: fadeIn 0.5s;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.msg-time {\n  font-size: 12px;\n  color: #999;\n  margin-top: 4px;\n  text-align: right;\n}\n\n.ai-history-btn-wrapper {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}