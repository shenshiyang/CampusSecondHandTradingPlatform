{"ast":null,"code":"export default {\n  data() {\n    return {\n      myId: JSON.parse(localStorage.getItem(\"xm-user\") || '{}').id,\n      currentUserId: null,\n      userList: [],\n      messageList: [],\n      messageText: ''\n    };\n  },\n  created() {\n    const toUserId = this.$route.query.toUserId;\n    this.loadUserList(() => {\n      if (toUserId) {\n        const user = this.userList.find(u => u.id === parseInt(toUserId));\n        if (user) {\n          this.selectUser(user);\n        }\n      }\n    });\n  },\n  methods: {\n    loadUserList(callback) {\n      this.$request.get('/chat/userList').then(res => {\n        this.userList = res.data || [];\n        if (callback) callback();\n      });\n    },\n    selectUser(user) {\n      this.currentUserId = user.id;\n      this.loadMessages();\n    },\n    loadMessages() {\n      this.$request.get('/chat/messages', {\n        params: {\n          userId: this.currentUserId\n        }\n      }).then(res => {\n        this.messageList = res.data || [];\n        this.$nextTick(() => {\n          this.$refs.chatBox.scrollTop = this.$refs.chatBox.scrollHeight;\n        });\n      });\n    },\n    sendMessage() {\n      if (!this.messageText.trim()) return;\n      this.$request.post('/chat/send', {\n        toUserId: this.currentUserId,\n        content: this.messageText\n      }).then(res => {\n        if (res.code === '200') {\n          this.messageText = '';\n          this.loadMessages();\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","myId","JSON","parse","localStorage","getItem","id","currentUserId","userList","messageList","messageText","created","toUserId","$route","query","loadUserList","user","find","u","parseInt","selectUser","methods","callback","$request","get","then","res","loadMessages","params","userId","$nextTick","$refs","chatBox","scrollTop","scrollHeight","sendMessage","trim","post","content","code"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"chat-user-list\">\n      <div v-for=\"user in userList\" :key=\"user.id\" class=\"user-item\" :class=\"{ active: user.id === currentUserId }\"\n           @click=\"selectUser(user)\">\n        <el-avatar :src=\"user.avatar\" />\n        <span>{{ user.name }}</span>\n      </div>\n    </div>\n\n    <div class=\"chat-main\">\n      <div class=\"chat-messages\" ref=\"chatBox\">\n        <div v-for=\"msg in messageList\" :key=\"msg.id\" :class=\"msg.senderId === myId ? 'my-msg' : 'other-msg'\">\n          <div>{{ msg.content }}</div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <el-input type=\"textarea\" rows=\"2\" v-model=\"messageText\" placeholder=\"请输入消息内容\" />\n        <el-button type=\"primary\" @click=\"sendMessage\">发送</el-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      myId: JSON.parse(localStorage.getItem(\"xm-user\") || '{}').id,\n      currentUserId: null,\n      userList: [],\n      messageList: [],\n      messageText: ''\n    }\n  },\n  created() {\n    const toUserId = this.$route.query.toUserId\n    this.loadUserList(() => {\n      if (toUserId) {\n        const user = this.userList.find(u => u.id === parseInt(toUserId))\n        if (user) {\n          this.selectUser(user)\n        }\n      }\n    })\n  },\n  methods: {\n    loadUserList(callback) {\n      this.$request.get('/chat/userList').then(res => {\n        this.userList = res.data || []\n        if (callback) callback()\n      })\n    },\n    selectUser(user) {\n      this.currentUserId = user.id\n      this.loadMessages()\n    },\n    loadMessages() {\n      this.$request.get('/chat/messages', {\n        params: {\n          userId: this.currentUserId\n        }\n      }).then(res => {\n        this.messageList = res.data || []\n        this.$nextTick(() => {\n          this.$refs.chatBox.scrollTop = this.$refs.chatBox.scrollHeight\n        })\n      })\n    },\n    sendMessage() {\n      if (!this.messageText.trim()) return\n      this.$request.post('/chat/send', {\n        toUserId: this.currentUserId,\n        content: this.messageText\n      }).then(res => {\n        if (res.code === '200') {\n          this.messageText = ''\n          this.loadMessages()\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  height: calc(100vh - 60px);\n  background: #fff;\n}\n.chat-user-list {\n  width: 250px;\n  border-right: 1px solid #eee;\n  padding: 10px;\n  overflow-y: auto;\n}\n.user-item {\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n.user-item span {\n  margin-left: 10px;\n}\n.user-item.active {\n  background-color: #f5f7fa;\n  font-weight: bold;\n}\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n.chat-messages {\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n}\n.my-msg {\n  text-align: right;\n  margin: 5px 0;\n  color: #409eff;\n}\n.other-msg {\n  text-align: left;\n  margin: 5px 0;\n}\n.chat-input {\n  padding: 10px;\n  border-top: 1px solid #eee;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n</style>\n"],"mappings":"AA0BA;EACAA,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA,qBAAAC,EAAA;MACAC,aAAA;MACAC,QAAA;MACAC,WAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,QAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,QAAA;IACA,KAAAG,YAAA;MACA,IAAAH,QAAA;QACA,MAAAI,IAAA,QAAAR,QAAA,CAAAS,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAZ,EAAA,KAAAa,QAAA,CAAAP,QAAA;QACA,IAAAI,IAAA;UACA,KAAAI,UAAA,CAAAJ,IAAA;QACA;MACA;IACA;EACA;EACAK,OAAA;IACAN,aAAAO,QAAA;MACA,KAAAC,QAAA,CAAAC,GAAA,mBAAAC,IAAA,CAAAC,GAAA;QACA,KAAAlB,QAAA,GAAAkB,GAAA,CAAA1B,IAAA;QACA,IAAAsB,QAAA,EAAAA,QAAA;MACA;IACA;IACAF,WAAAJ,IAAA;MACA,KAAAT,aAAA,GAAAS,IAAA,CAAAV,EAAA;MACA,KAAAqB,YAAA;IACA;IACAA,aAAA;MACA,KAAAJ,QAAA,CAAAC,GAAA;QACAI,MAAA;UACAC,MAAA,OAAAtB;QACA;MACA,GAAAkB,IAAA,CAAAC,GAAA;QACA,KAAAjB,WAAA,GAAAiB,GAAA,CAAA1B,IAAA;QACA,KAAA8B,SAAA;UACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,SAAA,QAAAF,KAAA,CAAAC,OAAA,CAAAE,YAAA;QACA;MACA;IACA;IACAC,YAAA;MACA,UAAAzB,WAAA,CAAA0B,IAAA;MACA,KAAAb,QAAA,CAAAc,IAAA;QACAzB,QAAA,OAAAL,aAAA;QACA+B,OAAA,OAAA5B;MACA,GAAAe,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAa,IAAA;UACA,KAAA7B,WAAA;UACA,KAAAiB,YAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}