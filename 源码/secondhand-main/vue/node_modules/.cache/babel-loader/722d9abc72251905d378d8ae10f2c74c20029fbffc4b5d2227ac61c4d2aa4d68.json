{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null,\n      showEmoji: false,\n      heartbeatTimer: null,\n      connectionCheckTimer: null,\n      wsConnectTimeout: null,\n      emojiList: ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇', '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩', '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣', '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬', '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗', '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯', '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐', '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈', '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾']\n    };\n  },\n  mounted() {\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n    this.initWebSocket();\n    document.addEventListener('click', this.closeEmojiPanel);\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.closeWebSocket();\n    }\n    document.removeEventListener('click', this.closeEmojiPanel);\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n      if (item.unreadCount) {\n        const index = this.userList.findIndex(u => u.chatUserId === item.chatUserId);\n        if (index !== -1) {\n          this.$set(this.userList[index], 'unreadCount', 0);\n        }\n      }\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data || [];\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      this.closeWebSocket();\n      const wsUrl = `ws://${window.location.host}/chatServer/${this.user.id}`;\n      console.log('正在连接WebSocket服务器:', wsUrl);\n      try {\n        this.ws = new WebSocket(wsUrl);\n        this.ws.onopen = () => {\n          console.log('WebSocket连接成功');\n          this.$message.success('聊天服务连接成功');\n          // 连接成功后开始心跳检测\n          this.startHeartbeat();\n        };\n        this.ws.onmessage = e => {\n          try {\n            console.log('收到WebSocket消息：', e.data);\n            const data = JSON.parse(e.data);\n            if (data.type === 'ack') {\n              // 处理消息确认\n              if (data.status === 'success') {\n                // 更新消息状态为已确认\n                const pendingMsg = this.chatList.find(msg => msg.pending);\n                if (pendingMsg) {\n                  this.$set(pendingMsg, 'pending', false);\n                  this.$set(pendingMsg, 'id', data.messageId);\n                }\n              } else {\n                // 消息发送失败\n                this.$message.error('消息发送失败：' + (data.error || '未知错误'));\n                // 移除未确认的消息\n                const index = this.chatList.findIndex(msg => msg.pending);\n                if (index !== -1) {\n                  this.chatList.splice(index, 1);\n                }\n              }\n            } else if (data.type === 'chat') {\n              console.log('处理聊天消息：', data);\n              // 如果是当前聊天对象的消息\n              if (data.fromUserId === this.active && data.toUserId === this.user.id || data.toUserId === this.active && data.fromUserId === this.user.id) {\n                const newMsg = {\n                  userId: data.fromUserId,\n                  chatUserId: data.toUserId,\n                  text: data.content,\n                  contentType: data.contentType || 'text',\n                  fileName: data.fileName\n                };\n\n                // 检查是否已经有这条消息（防止重复）\n                const exists = this.chatList.some(msg => msg.userId === newMsg.userId && msg.text === newMsg.text && msg.timestamp === data.timestamp);\n                if (!exists) {\n                  this.chatList.push(newMsg);\n\n                  // 如果是收到的消息，标记为已读\n                  if (data.toUserId === this.user.id) {\n                    this.$request.put(`/chatInfo/updateRead/${data.fromUserId}`);\n                  }\n                  this.$nextTick(() => {\n                    const box = this.$refs.chatBox;\n                    if (box) box.scrollTop = box.scrollHeight;\n                  });\n                }\n              } else {\n                // 如果不是当前聊天对象的消息，更新用户列表以显示未读消息数\n                this.loadUserList();\n              }\n            } else if (data.type === 'heartbeat') {\n              console.log('收到心跳响应');\n            }\n          } catch (error) {\n            console.error('解析WebSocket消息失败:', error, '原始消息:', e.data);\n          }\n        };\n        this.ws.onclose = event => {\n          console.log('WebSocket连接关闭，状态码：', event.code, '原因：', event.reason);\n          this.stopHeartbeat();\n\n          // 如果不是主动关闭的连接，则尝试重连\n          if (event.code !== 1000) {\n            this.$message.warning('聊天服务连接断开，正在重新连接...');\n            setTimeout(() => {\n              console.log('尝试重新连接WebSocket...');\n              this.initWebSocket();\n            }, 3000);\n          }\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket连接错误：', error);\n          this.$message.error('聊天服务连接异常，正在尝试重连...');\n        };\n\n        // 添加连接超时处理\n        this.wsConnectTimeout = setTimeout(() => {\n          if (this.ws.readyState !== WebSocket.OPEN) {\n            console.log('WebSocket连接超时');\n            this.ws.close();\n            this.$message.error('聊天服务连接超时，请检查网络后刷新重试');\n          }\n        }, 5000);\n      } catch (error) {\n        console.error('创建WebSocket连接失败:', error);\n        this.$message.error('创建聊天服务连接失败，请刷新页面重试');\n      }\n    },\n    startHeartbeat() {\n      // 每30秒发送一次心跳\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({\n            type: 'heartbeat'\n          }));\n        }\n      }, 30000);\n\n      // 每分钟检查一次连接状态\n      this.connectionCheckTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState !== WebSocket.OPEN) {\n          console.log('检测到WebSocket连接已断开，尝试重新连接');\n          this.initWebSocket();\n        }\n      }, 60000);\n    },\n    stopHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = null;\n      }\n      if (this.connectionCheckTimer) {\n        clearInterval(this.connectionCheckTimer);\n        this.connectionCheckTimer = null;\n      }\n    },\n    closeWebSocket() {\n      this.stopHeartbeat();\n      if (this.ws) {\n        this.ws.close(1000, '用户主动关闭连接');\n        this.ws = null;\n      }\n    },\n    send() {\n      if (!this.content.trim()) return;\n\n      // 创建消息对象\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        contentType: 'text'\n      };\n\n      // 发送WebSocket消息\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        const wsMessage = {\n          type: 'chat',\n          fromUserId: this.user.id,\n          fromUserName: this.user.name,\n          fromUserAvatar: this.user.avatar,\n          toUserId: this.active,\n          content: this.content,\n          contentType: 'text',\n          timestamp: new Date().getTime()\n        };\n\n        // 添加到本地聊天列表，但标记为未确认\n        const tempMsg = {\n          ...msg,\n          userName: this.user.name,\n          userAvatar: this.user.avatar,\n          pending: true\n        };\n        const msgIndex = this.chatList.length;\n        this.chatList.push(tempMsg);\n\n        // 清空输入框并滚动到底部\n        this.content = '';\n        this.$nextTick(() => {\n          const box = this.$refs.chatBox;\n          if (box) box.scrollTop = box.scrollHeight;\n        });\n        this.ws.send(JSON.stringify(wsMessage));\n      } else {\n        this.$message.error('聊天服务连接已断开，请刷新页面重试');\n      }\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmoji = false;\n    },\n    closeEmojiPanel(e) {\n      const emojiTool = document.querySelector('.emoji-tool');\n      if (emojiTool && !emojiTool.contains(e.target)) {\n        this.showEmoji = false;\n      }\n    },\n    handleImageSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'image'\n        };\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'image',\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    handleFileSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'file',\n          fileName: file.name\n        };\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'file',\n                fileName: file.name,\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    previewImage(imageUrl) {\n      // 实现图片预览逻辑\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","userList","chatList","chatTitle","active","content","activeUserAvatar","ws","showEmoji","heartbeatTimer","connectionCheckTimer","wsConnectTimeout","emojiList","mounted","loadUserList","then","toUserId","$route","query","target","find","u","chatUserId","changeChatUser","$request","post","userId","id","added","initWebSocket","document","addEventListener","closeEmojiPanel","beforeDestroy","closeWebSocket","removeEventListener","methods","get","res","code","item","chatUserName","chatUserAvatar","put","loadChatRecord","unreadCount","index","findIndex","$set","$nextTick","box","$refs","chatBox","scrollTop","scrollHeight","WebSocket","$message","error","wsUrl","window","location","host","console","log","onopen","success","startHeartbeat","onmessage","e","type","status","pendingMsg","msg","pending","messageId","splice","fromUserId","newMsg","text","contentType","fileName","exists","some","timestamp","push","onclose","event","reason","stopHeartbeat","warning","setTimeout","onerror","readyState","OPEN","close","setInterval","send","stringify","clearInterval","trim","wsMessage","fromUserName","name","fromUserAvatar","avatar","Date","getTime","tempMsg","userName","userAvatar","msgIndex","length","insertEmoji","emoji","emojiTool","querySelector","contains","handleImageSuccess","response","file","handleFileSuccess","previewImage","imageUrl"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <div class=\"chat-user-list\">\n      <div\n        v-for=\"item in userList\"\n        :key=\"item.chatUserId\"\n        :class=\"['chat-user', item.chatUserId === active ? 'active' : '']\"\n        @click=\"changeChatUser(item)\">\n        <div class=\"user-avatar\">\n          <img :src=\"item.chatUserAvatar\" alt=\"\">\n          <span v-if=\"item.unreadCount\" class=\"unread-count\">{{ item.unreadCount }}</span>\n        </div>\n        <div class=\"user-info\">\n          <div class=\"user-name\">{{ item.chatUserName }}</div>\n          <div class=\"last-msg\">{{ item.lastMessage }}</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-main\" v-if=\"active\">\n      <div class=\"chat-header\">\n        <div class=\"chat-title\">\n          <img :src=\"activeUserAvatar\" alt=\"\" class=\"title-avatar\">\n          <span>{{ chatTitle }}</span>\n        </div>\n        <div class=\"chat-actions\">\n          <i class=\"el-icon-more\"></i>\n        </div>\n      </div>\n\n      <div class=\"chat-box\" ref=\"chatBox\">\n        <div\n          v-for=\"(item, index) in chatList\"\n          :key=\"index\"\n          :class=\"['msg-box', item.userId === user.id ? 'right' : 'left']\">\n          <img\n            class=\"avatar\"\n            :src=\"item.userId === user.id ? user.avatar : activeUserAvatar\"\n            alt=\"头像\">\n          <div class=\"msg-content\">\n            <div class=\"msg-text\" v-if=\"!item.contentType || item.contentType === 'text'\">{{ item.text }}</div>\n            <div class=\"msg-image\" v-else-if=\"item.contentType === 'image'\" @click=\"previewImage(item.text)\">\n              <el-image \n                :src=\"item.text\" \n                :preview-src-list=\"[item.text]\"\n                fit=\"cover\">\n              </el-image>\n            </div>\n            <div class=\"msg-file\" v-else-if=\"item.contentType === 'file'\">\n              <i class=\"el-icon-document\"></i>\n              <span class=\"file-name\">{{ item.fileName || '文件' }}</span>\n              <a :href=\"item.text\" target=\"_blank\" class=\"download-btn\">下载</a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <div class=\"input-tools\">\n          <div class=\"emoji-tool\">\n            <i class=\"el-icon-sunny\" @click=\"showEmoji = !showEmoji\"></i>\n            <div class=\"emoji-panel\" v-show=\"showEmoji\">\n              <div class=\"emoji-list\">\n                <span\n                  v-for=\"(emoji, index) in emojiList\"\n                  :key=\"index\"\n                  @click=\"insertEmoji(emoji)\"\n                  class=\"emoji-item\"\n                >{{ emoji }}</span>\n              </div>\n            </div>\n          </div>\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"$baseUrl + '/files/upload'\"\n            :headers=\"{ token: user.token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleImageSuccess\"\n            accept=\"image/*\">\n            <i class=\"el-icon-picture-outline\"></i>\n          </el-upload>\n          <el-upload\n            class=\"upload-demo\"\n            :action=\"$baseUrl + '/files/upload'\"\n            :headers=\"{ token: user.token }\"\n            :show-file-list=\"false\"\n            :on-success=\"handleFileSuccess\"\n            accept=\"*\">\n            <i class=\"el-icon-folder\"></i>\n          </el-upload>\n        </div>\n        <div class=\"input-box\">\n          <el-input\n            v-model=\"content\"\n            type=\"textarea\"\n            :rows=\"3\"\n            placeholder=\"请输入聊天内容\"\n            @keyup.enter.native=\"send\"\n            resize=\"none\">\n          </el-input>\n          <el-button type=\"primary\" class=\"send-btn\" @click=\"send\">发送</el-button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-welcome\" v-else>\n      <div class=\"welcome-content\">\n        <i class=\"el-icon-chat-line-round\"></i>\n        <p>选择一个联系人开始聊天</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null,\n      showEmoji: false,\n      heartbeatTimer: null,\n      connectionCheckTimer: null,\n      wsConnectTimeout: null,\n      emojiList: [\n        '😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇',\n        '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚',\n        '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩',\n        '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣',\n        '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬',\n        '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗',\n        '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯',\n        '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐',\n        '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈',\n        '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾'\n      ]\n    }\n  },\n  mounted() {\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n    this.initWebSocket();\n    document.addEventListener('click', this.closeEmojiPanel);\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.closeWebSocket();\n    }\n    document.removeEventListener('click', this.closeEmojiPanel);\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n      if (item.unreadCount) {\n        const index = this.userList.findIndex(u => u.chatUserId === item.chatUserId);\n        if (index !== -1) {\n          this.$set(this.userList[index], 'unreadCount', 0);\n        }\n      }\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data || [];\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    initWebSocket() {\n      if (typeof WebSocket === 'undefined') {\n        this.$message.error('您的浏览器不支持WebSocket');\n        return;\n      }\n      this.closeWebSocket();\n      \n      const wsUrl = `ws://${window.location.host}/chatServer/${this.user.id}`;\n      console.log('正在连接WebSocket服务器:', wsUrl);\n      \n      try {\n        this.ws = new WebSocket(wsUrl);\n        \n        this.ws.onopen = () => {\n          console.log('WebSocket连接成功');\n          this.$message.success('聊天服务连接成功');\n          // 连接成功后开始心跳检测\n          this.startHeartbeat();\n        };\n        \n        this.ws.onmessage = (e) => {\n          try {\n            console.log('收到WebSocket消息：', e.data);\n            const data = JSON.parse(e.data);\n            \n            if (data.type === 'ack') {\n              // 处理消息确认\n              if (data.status === 'success') {\n                // 更新消息状态为已确认\n                const pendingMsg = this.chatList.find(msg => msg.pending);\n                if (pendingMsg) {\n                  this.$set(pendingMsg, 'pending', false);\n                  this.$set(pendingMsg, 'id', data.messageId);\n                }\n              } else {\n                // 消息发送失败\n                this.$message.error('消息发送失败：' + (data.error || '未知错误'));\n                // 移除未确认的消息\n                const index = this.chatList.findIndex(msg => msg.pending);\n                if (index !== -1) {\n                  this.chatList.splice(index, 1);\n                }\n              }\n            } else if (data.type === 'chat') {\n              console.log('处理聊天消息：', data);\n              // 如果是当前聊天对象的消息\n              if ((data.fromUserId === this.active && data.toUserId === this.user.id) || \n                  (data.toUserId === this.active && data.fromUserId === this.user.id)) {\n                const newMsg = {\n                  userId: data.fromUserId,\n                  chatUserId: data.toUserId,\n                  text: data.content,\n                  contentType: data.contentType || 'text',\n                  fileName: data.fileName\n                };\n                \n                // 检查是否已经有这条消息（防止重复）\n                const exists = this.chatList.some(msg => \n                  msg.userId === newMsg.userId && \n                  msg.text === newMsg.text && \n                  msg.timestamp === data.timestamp\n                );\n                \n                if (!exists) {\n                  this.chatList.push(newMsg);\n                  \n                  // 如果是收到的消息，标记为已读\n                  if (data.toUserId === this.user.id) {\n                    this.$request.put(`/chatInfo/updateRead/${data.fromUserId}`);\n                  }\n                  \n                  this.$nextTick(() => {\n                    const box = this.$refs.chatBox;\n                    if (box) box.scrollTop = box.scrollHeight;\n                  });\n                }\n              } else {\n                // 如果不是当前聊天对象的消息，更新用户列表以显示未读消息数\n                this.loadUserList();\n              }\n            } else if (data.type === 'heartbeat') {\n              console.log('收到心跳响应');\n            }\n          } catch (error) {\n            console.error('解析WebSocket消息失败:', error, '原始消息:', e.data);\n          }\n        };\n        \n        this.ws.onclose = (event) => {\n          console.log('WebSocket连接关闭，状态码：', event.code, '原因：', event.reason);\n          this.stopHeartbeat();\n          \n          // 如果不是主动关闭的连接，则尝试重连\n          if (event.code !== 1000) {\n            this.$message.warning('聊天服务连接断开，正在重新连接...');\n            setTimeout(() => {\n              console.log('尝试重新连接WebSocket...');\n              this.initWebSocket();\n            }, 3000);\n          }\n        };\n        \n        this.ws.onerror = (error) => {\n          console.error('WebSocket连接错误：', error);\n          this.$message.error('聊天服务连接异常，正在尝试重连...');\n        };\n        \n        // 添加连接超时处理\n        this.wsConnectTimeout = setTimeout(() => {\n          if (this.ws.readyState !== WebSocket.OPEN) {\n            console.log('WebSocket连接超时');\n            this.ws.close();\n            this.$message.error('聊天服务连接超时，请检查网络后刷新重试');\n          }\n        }, 5000);\n        \n      } catch (error) {\n        console.error('创建WebSocket连接失败:', error);\n        this.$message.error('创建聊天服务连接失败，请刷新页面重试');\n      }\n    },\n    startHeartbeat() {\n      // 每30秒发送一次心跳\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(JSON.stringify({ type: 'heartbeat' }));\n        }\n      }, 30000);\n\n      // 每分钟检查一次连接状态\n      this.connectionCheckTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState !== WebSocket.OPEN) {\n          console.log('检测到WebSocket连接已断开，尝试重新连接');\n          this.initWebSocket();\n        }\n      }, 60000);\n    },\n    stopHeartbeat() {\n      if (this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = null;\n      }\n      if (this.connectionCheckTimer) {\n        clearInterval(this.connectionCheckTimer);\n        this.connectionCheckTimer = null;\n      }\n    },\n    closeWebSocket() {\n      this.stopHeartbeat();\n      if (this.ws) {\n        this.ws.close(1000, '用户主动关闭连接');\n        this.ws = null;\n      }\n    },\n    send() {\n      if (!this.content.trim()) return;\n      \n      // 创建消息对象\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content,\n        contentType: 'text'\n      };\n\n      // 发送WebSocket消息\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        const wsMessage = {\n          type: 'chat',\n          fromUserId: this.user.id,\n          fromUserName: this.user.name,\n          fromUserAvatar: this.user.avatar,\n          toUserId: this.active,\n          content: this.content,\n          contentType: 'text',\n          timestamp: new Date().getTime()\n        };\n\n        // 添加到本地聊天列表，但标记为未确认\n        const tempMsg = {\n          ...msg,\n          userName: this.user.name,\n          userAvatar: this.user.avatar,\n          pending: true\n        };\n        const msgIndex = this.chatList.length;\n        this.chatList.push(tempMsg);\n\n        // 清空输入框并滚动到底部\n        this.content = '';\n        this.$nextTick(() => {\n          const box = this.$refs.chatBox;\n          if (box) box.scrollTop = box.scrollHeight;\n        });\n\n        this.ws.send(JSON.stringify(wsMessage));\n      } else {\n        this.$message.error('聊天服务连接已断开，请刷新页面重试');\n      }\n    },\n    insertEmoji(emoji) {\n      this.content += emoji;\n      this.showEmoji = false;\n    },\n    closeEmojiPanel(e) {\n      const emojiTool = document.querySelector('.emoji-tool');\n      if (emojiTool && !emojiTool.contains(e.target)) {\n        this.showEmoji = false;\n      }\n    },\n    handleImageSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'image'\n        };\n\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'image',\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    handleFileSuccess(response, file) {\n      if (response.code === '200') {\n        const msg = {\n          userId: this.user.id,\n          chatUserId: this.active,\n          text: response.data,\n          contentType: 'file',\n          fileName: file.name\n        };\n\n        this.$request.post('/chatInfo/add', msg).then(res => {\n          if (res.code === '200') {\n            this.chatList.push({\n              ...msg,\n              userName: this.user.name,\n              userAvatar: this.user.avatar\n            });\n\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n              const wsMessage = {\n                type: 'chat',\n                fromUserId: this.user.id,\n                fromUserName: this.user.name,\n                fromUserAvatar: this.user.avatar,\n                toUserId: this.active,\n                content: response.data,\n                contentType: 'file',\n                fileName: file.name,\n                timestamp: new Date().getTime()\n              };\n              this.ws.send(JSON.stringify(wsMessage));\n            }\n\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n          }\n        });\n      }\n    },\n    previewImage(imageUrl) {\n      // 实现图片预览逻辑\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  height: 85vh;\n  background: #f5f5f5;\n  margin: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.chat-user-list {\n  width: 280px;\n  background: #f5f5f5;\n  border-right: 1px solid #e6e6e6;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-user {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  cursor: pointer;\n  position: relative;\n}\n\n.chat-user:hover,\n.chat-user.active {\n  background-color: #e6e6e6;\n}\n\n.user-avatar {\n  position: relative;\n  margin-right: 12px;\n}\n\n.user-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n}\n\n.unread-count {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background: #f56c6c;\n  color: white;\n  border-radius: 10px;\n  min-width: 18px;\n  height: 18px;\n  line-height: 18px;\n  text-align: center;\n  font-size: 12px;\n  padding: 0 6px;\n}\n\n.user-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.user-name {\n  font-size: 14px;\n  color: #333;\n  margin-bottom: 4px;\n}\n\n.last-msg {\n  font-size: 12px;\n  color: #999;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: #f5f5f5;\n}\n\n.chat-header {\n  height: 60px;\n  background: #f5f5f5;\n  border-bottom: 1px solid #e6e6e6;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px;\n}\n\n.chat-title {\n  display: flex;\n  align-items: center;\n}\n\n.title-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.chat-actions {\n  color: #666;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n.chat-box {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background: #f5f5f5;\n}\n\n.msg-box {\n  display: flex;\n  margin-bottom: 20px;\n}\n\n.msg-box.left {\n  flex-direction: row;\n}\n\n.msg-box.right {\n  flex-direction: row-reverse;\n}\n\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  margin: 0 10px;\n}\n\n.msg-content {\n  max-width: 60%;\n}\n\n.msg-text {\n  background: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  word-break: break-all;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  white-space: pre-wrap;\n}\n\n.msg-box.right .msg-text {\n  background: #95ec69;\n}\n\n.chat-input {\n  background: #f5f5f5;\n  border-top: 1px solid #e6e6e6;\n  padding: 10px;\n}\n\n.input-tools {\n  display: flex;\n  padding: 5px 0;\n}\n\n.input-tools i {\n  font-size: 20px;\n  color: #666;\n  margin-right: 15px;\n  cursor: pointer;\n}\n\n.input-box {\n  margin: 5px 0;\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  gap: 10px;\n}\n\n.input-box .el-textarea {\n  flex: 1;\n}\n\n.send-btn {\n  height: 65px;\n  padding: 0 20px;\n}\n\n.input-actions {\n  display: none;\n}\n\n.chat-welcome {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #f5f5f5;\n  border-left: 1px solid #e6e6e6;\n}\n\n.welcome-content {\n  text-align: center;\n  color: #909399;\n}\n\n.welcome-content i {\n  font-size: 80px;\n  margin-bottom: 20px;\n}\n\n.welcome-content p {\n  font-size: 16px;\n  margin: 0;\n}\n\n.emoji-tool {\n  position: relative;\n  display: inline-block;\n}\n\n.emoji-panel {\n  position: absolute;\n  bottom: 40px;\n  left: 0;\n  width: 360px;\n  height: 200px;\n  background: white;\n  border: 1px solid #e6e6e6;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n  padding: 10px;\n  z-index: 1000;\n}\n\n.emoji-list {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 5px;\n  height: 100%;\n  overflow-y: auto;\n}\n\n.emoji-item {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px;\n  transition: all 0.3s;\n}\n\n.emoji-item:hover {\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n/* 自定义滚动条样式 */\n.emoji-list::-webkit-scrollbar {\n  width: 6px;\n}\n\n.emoji-list::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n.emoji-list::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n/* 确保表情在消息中正确显示 */\n.msg-text img.emoji {\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  margin: 0 1px;\n}\n\n.msg-image {\n  max-width: 200px;\n  cursor: pointer;\n}\n\n.msg-image .el-image {\n  width: 100%;\n  max-width: 200px;\n  border-radius: 4px;\n}\n\n.msg-file {\n  display: flex;\n  align-items: center;\n  background: white;\n  padding: 10px 15px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.msg-file i {\n  font-size: 24px;\n  color: #409EFF;\n  margin-right: 10px;\n}\n\n.file-name {\n  flex: 1;\n  font-size: 14px;\n  color: #333;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-right: 10px;\n}\n\n.download-btn {\n  color: #409EFF;\n  text-decoration: none;\n}\n\n.msg-box.right .download-btn {\n  color: #2b5f0d;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}