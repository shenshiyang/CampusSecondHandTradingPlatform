{"ast":null,"code":"let socket;\nexport default {\n  name: \"Chat\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      chatGroupList: [],\n      activeChatUserId: 0,\n      form: {},\n      chatList: []\n    };\n  },\n  created() {\n    this.init();\n    this.loadChatGroup();\n  },\n  methods: {\n    closeGroup(id) {\n      this.$request.delete('/chatGroup/delete/' + id).then(res => {\n        this.loadChatGroup();\n        this.chatList = []; // 清空聊天消息\n      });\n    },\n\n    send() {\n      if (!this.activeChatUserId) {\n        this.$message.warning('请选择聊天对象');\n        return;\n      }\n      if (!this.form.text) {\n        this.$message.warning('请输入消息内容');\n        return;\n      }\n      this.form.chatUserId = this.activeChatUserId;\n      this.form.userId = this.user.id;\n      this.$request.post('/chatInfo/add', this.form).then(res => {\n        this.form = {};\n        this.loadChatList(this.activeChatUserId);\n\n        // 发送socket消息\n        socket.send('聊天消息');\n      });\n    },\n    loadChatList(chatUserId) {\n      this.form = {};\n      this.activeChatUserId = chatUserId;\n\n      // 更新消息读取状态\n      this.$request.put('/chatInfo/updateRead/' + chatUserId).then(res => {\n        this.loadChatGroup();\n      });\n      this.$request.get('/chatInfo/selectUserChat/' + chatUserId).then(res => {\n        this.chatList = res.data || [];\n        document.getElementById('chat-text-end').click();\n      });\n    },\n    loadChatGroup() {\n      this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        this.chatGroupList = res.data || [];\n      });\n    },\n    init() {\n      let _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        let socketUrl = \"ws://localhost:9090/chatServer/\" + this.user.id;\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = new WebSocket(socketUrl);\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端数据库里的最新的聊天消息\n        socket.onmessage = function (msg) {\n          _this.loadChatGroup();\n          _this.loadChatList(_this.activeChatUserId);\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["socket","name","data","user","JSON","parse","localStorage","getItem","chatGroupList","activeChatUserId","form","chatList","created","init","loadChatGroup","methods","closeGroup","id","$request","delete","then","res","send","$message","warning","text","chatUserId","userId","post","loadChatList","put","get","document","getElementById","click","_this","WebSocket","console","log","socketUrl","close","onopen","onmessage","msg","onclose","onerror"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div style=\"width: 60%; margin: 10px auto\">\n\n    <div style=\"display: flex; grid-gap: 20px\">\n\n      <!-- 聊天组开始 -->\n      <div class=\"chat-card\" style=\"width: 200px; min-height: 600px\">\n        <div v-if=\"chatGroupList.length > 0\" @click=\"loadChatList(item.chatUserId)\" v-for=\"item in chatGroupList\" :key=\"item.id\">\n          <div style=\"position: relative\" v-if=\"item.userId === user.id\" class=\"chat-group\" :class=\"{'chat-group-active' : item.chatUserId === activeChatUserId}\">\n            <img :src=\"item.chatUserAvatar\" style=\"width: 50px; height: 50px; border-radius: 50%\" />\n            <el-badge :value=\"item.chatNum\" :max=\"99\" v-if=\"item.chatNum > 0 && !activeChatUserId\">\n              <span style=\"color: #333\">{{ item.chatUserName }}</span>\n            </el-badge>\n            <span v-else style=\"color: #333\">{{ item.chatUserName }}</span>\n\n            <i class=\"el-icon-close\" style=\"position: absolute; top: 10px; right: 10px\" @click.stop=\"closeGroup(item.id)\"></i>\n          </div>\n        </div>\n        <div v-if=\"chatGroupList.length === 0\" style=\"color: #666; padding: 20px 0; text-align: center\">暂无聊天对象..</div>\n      </div>\n      <!-- 聊天组结束 -->\n\n      <!-- 聊天消息开始 -->\n      <div class=\"chat-card\" style=\"flex: 1; height: 600px\">\n        <div class=\"chat-text\" style=\"height: 400px; border-bottom: 1px solid #ddd; overflow-y: auto;\">\n          <div v-for=\"item in chatList\" :key=\"item.id\" style=\"margin-bottom: 20px\">\n\n            <!-- 左边的聊天消息开始 -->\n            <!-- item.chatUserId === user.id 表示对方在跟当前登录的人聊天 user表示对方  显示对方的名称和头像        -->\n            <div v-if=\"item.chatUserId === user.id\" style=\"display: flex; grid-gap: 10px\">\n              <img style=\"width: 50px; height: 50px; border-radius: 5px\" :src=\"item.userAvatar\" alt=\"\">\n              <div style=\"max-width: 50%; width: fit-content\">\n                <div style=\"color: #666; margin-bottom: 5px\">{{ item.userName }}</div>\n                <div style=\"background-color: #d1e7ff; padding: 10px; border-radius: 5px;\" v-text=\"item.text\"></div>\n              </div>\n            </div>\n            <!-- 左边的聊天消息结束 -->\n\n            <!-- 右边的聊天消息开始 -->\n            <div v-if=\"item.userId === user.id\" style=\"display: flex; justify-content: right; grid-gap: 10px\">\n              <div style=\"max-width: 50%; width: fit-content\">\n                <div style=\"color: #666; margin-bottom: 5px; text-align: right\">{{ item.userName }}</div>\n                <div style=\"background-color: #a3eecb; padding: 10px; border-radius: 5px;\" v-text=\"item.text\"></div>\n              </div>\n              <img style=\"width: 50px; height: 50px; border-radius: 5px\" :src=\"item.userAvatar\" alt=\"\">\n            </div>\n            <!-- 右边的聊天消息结束 -->\n\n          </div>\n          <div style=\"height: 0\"><a id=\"chat-text-end\" name=\"1\" href=\"#1\" style=\"outline: none\">&nbsp</a></div>\n        </div>\n        <!-- 聊天消息结束 -->\n\n        <!-- 聊天输入框开始 -->\n        <div style=\"height: 200px\">\n          <textarea v-model=\"form.text\" style=\"height: 160px; width: 100%; padding: 20px; border: none;\n             border-bottom: 1px solid #ddd; outline: none\"></textarea>\n          <div style=\"text-align: right; padding-right: 10px\">\n            <el-button type=\"primary\" size=\"mini\" @click=\"send\">发送</el-button>\n          </div>\n        </div>\n        <!-- 聊天输入框结束 -->\n\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nlet socket\n\nexport default {\n  name: \"Chat\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      chatGroupList: [],\n      activeChatUserId: 0,\n      form: {},\n      chatList: []\n    }\n  },\n  created() {\n    this.init()\n    this.loadChatGroup()\n  },\n  methods: {\n    closeGroup(id) {\n      this.$request.delete('/chatGroup/delete/' + id).then(res => {\n        this.loadChatGroup()\n        this.chatList = []  // 清空聊天消息\n      })\n    },\n    send() {\n      if (!this.activeChatUserId) {\n        this.$message.warning('请选择聊天对象')\n        return\n      }\n      if (!this.form.text) {\n        this.$message.warning('请输入消息内容')\n        return\n      }\n      this.form.chatUserId = this.activeChatUserId\n      this.form.userId = this.user.id\n      this.$request.post('/chatInfo/add', this.form).then(res => {\n        this.form = {}\n        this.loadChatList(this.activeChatUserId)\n\n        // 发送socket消息\n        socket.send('聊天消息')\n      })\n    },\n    loadChatList(chatUserId) {\n      this.form = {}\n      this.activeChatUserId = chatUserId\n\n      // 更新消息读取状态\n      this.$request.put('/chatInfo/updateRead/' + chatUserId).then(res => {\n\n        this.loadChatGroup()\n      })\n      this.$request.get('/chatInfo/selectUserChat/' + chatUserId).then(res => {\n        this.chatList = res.data || []\n        document.getElementById('chat-text-end').click()\n      })\n    },\n    loadChatGroup() {\n      this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        this.chatGroupList = res.data || []\n      })\n    },\n    init() {\n      let _this = this\n      if (typeof (WebSocket) == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\")\n      } else {\n        console.log(\"您的浏览器支持WebSocket\")\n        let socketUrl = \"ws://localhost:9090/chatServer/\" + this.user.id\n        if (socket != null) {\n          socket.close()\n          socket = null\n        }\n        // 开启一个websocket服务\n        socket = new WebSocket(socketUrl)\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\")\n        }\n        //  浏览器端收消息，获得从服务端数据库里的最新的聊天消息\n        socket.onmessage = function (msg) {\n          _this.loadChatGroup()\n          _this.loadChatList(_this.activeChatUserId)\n        }\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\")\n        }\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\")\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-card {\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.1);\n}\n.chat-group {\n  padding: 10px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  grid-gap: 10px;\n  border-bottom: 1px solid #ddd\n}\n.chat-group-active {\n  background-color: #d1e7ff;\n}\n.chat-text {\n  padding: 20px;\n}\n.chat-text::-webkit-scrollbar {\n  width: 10px;\n}\n.chat-text::-webkit-scrollbar-thumb {\n  border-radius: 8px;\n  background-color: #d1e7ff;\n}\n/deep/.el-badge__content.is-fixed {\n  right: 2px;\n}\n</style>"],"mappings":"AAsEA,IAAAA,MAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,aAAA;MACAC,gBAAA;MACAC,IAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAC,WAAAC,EAAA;MACA,KAAAC,QAAA,CAAAC,MAAA,wBAAAF,EAAA,EAAAG,IAAA,CAAAC,GAAA;QACA,KAAAP,aAAA;QACA,KAAAH,QAAA;MACA;IACA;;IACAW,KAAA;MACA,UAAAb,gBAAA;QACA,KAAAc,QAAA,CAAAC,OAAA;QACA;MACA;MACA,UAAAd,IAAA,CAAAe,IAAA;QACA,KAAAF,QAAA,CAAAC,OAAA;QACA;MACA;MACA,KAAAd,IAAA,CAAAgB,UAAA,QAAAjB,gBAAA;MACA,KAAAC,IAAA,CAAAiB,MAAA,QAAAxB,IAAA,CAAAc,EAAA;MACA,KAAAC,QAAA,CAAAU,IAAA,uBAAAlB,IAAA,EAAAU,IAAA,CAAAC,GAAA;QACA,KAAAX,IAAA;QACA,KAAAmB,YAAA,MAAApB,gBAAA;;QAEA;QACAT,MAAA,CAAAsB,IAAA;MACA;IACA;IACAO,aAAAH,UAAA;MACA,KAAAhB,IAAA;MACA,KAAAD,gBAAA,GAAAiB,UAAA;;MAEA;MACA,KAAAR,QAAA,CAAAY,GAAA,2BAAAJ,UAAA,EAAAN,IAAA,CAAAC,GAAA;QAEA,KAAAP,aAAA;MACA;MACA,KAAAI,QAAA,CAAAa,GAAA,+BAAAL,UAAA,EAAAN,IAAA,CAAAC,GAAA;QACA,KAAAV,QAAA,GAAAU,GAAA,CAAAnB,IAAA;QACA8B,QAAA,CAAAC,cAAA,kBAAAC,KAAA;MACA;IACA;IACApB,cAAA;MACA,KAAAI,QAAA,CAAAa,GAAA,+BAAAX,IAAA,CAAAC,GAAA;QACA,KAAAb,aAAA,GAAAa,GAAA,CAAAnB,IAAA;MACA;IACA;IACAW,KAAA;MACA,IAAAsB,KAAA;MACA,WAAAC,SAAA;QACAC,OAAA,CAAAC,GAAA;MACA;QACAD,OAAA,CAAAC,GAAA;QACA,IAAAC,SAAA,4CAAApC,IAAA,CAAAc,EAAA;QACA,IAAAjB,MAAA;UACAA,MAAA,CAAAwC,KAAA;UACAxC,MAAA;QACA;QACA;QACAA,MAAA,OAAAoC,SAAA,CAAAG,SAAA;QACA;QACAvC,MAAA,CAAAyC,MAAA;UACAJ,OAAA,CAAAC,GAAA;QACA;QACA;QACAtC,MAAA,CAAA0C,SAAA,aAAAC,GAAA;UACAR,KAAA,CAAArB,aAAA;UACAqB,KAAA,CAAAN,YAAA,CAAAM,KAAA,CAAA1B,gBAAA;QACA;QACA;QACAT,MAAA,CAAA4C,OAAA;UACAP,OAAA,CAAAC,GAAA;QACA;QACA;QACAtC,MAAA,CAAA6C,OAAA;UACAR,OAAA,CAAAC,GAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}