{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      chatGroupList: [],\n      currentChatUserId: null,\n      currentChatName: '',\n      currentChatAvatar: '',\n      messageList: [],\n      text: '',\n      socket: null,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      heartbeat: null\n    };\n  },\n  created() {\n    this.initSocket();\n    this.loadGroup().then(() => {\n      const id = Number(this.$route.query.chatUserId);\n      if (id) this.initChat(id);\n    });\n  },\n  beforeDestroy() {\n    clearInterval(this.heartbeat);\n    this.socket && this.socket.close();\n  },\n  methods: {\n    /* ----------- 会话列表 ----------- */\n    async loadGroup() {\n      const res = await this.$request.get('/chatGroup/selectUserGroup');\n      this.chatGroupList = res.data || [];\n    },\n    selectChat(g) {\n      if (this.currentChatUserId === g.chatUserId) return;\n      // URL 同步\n      this.$router.replace({\n        query: {\n          chatUserId: g.chatUserId\n        }\n      });\n      this.initChat(g.chatUserId);\n      g.chatNum = 0; // 清未读\n    },\n\n    async initChat(chatUserId) {\n      const target = this.chatGroupList.find(v => v.chatUserId === chatUserId);\n      if (!target) return;\n      this.currentChatUserId = chatUserId;\n      this.currentChatName = target.chatUserName;\n      this.currentChatAvatar = target.chatUserAvatar;\n      // 拉历史\n      const res = await this.$request.get('/chatInfo/selectUserChat', {\n        params: {\n          chatUserId\n        }\n      });\n      this.messageList = res.data || [];\n      await this.$request.put('/chatInfo/updateRead/' + chatUserId);\n      this.$nextTick(this.scrollBottom);\n    },\n    /* ----------- 发送 / 接收 ----------- */\n    handleKeydown(e) {\n      if (e.key === 'Enter' && !e.ctrlKey) {\n        e.preventDefault();\n        this.send();\n      }\n    },\n    async send() {\n      const content = this.text.trim();\n      if (!content) return;\n      const msg = {\n        sendId: this.user.id,\n        sendAvatar: this.user.avatar,\n        chatUserId: this.currentChatUserId,\n        content\n      };\n      // 本地渲染\n      this.messageList.push({\n        ...msg,\n        id: Date.now()\n      });\n      this.text = '';\n      this.$nextTick(this.scrollBottom);\n      // 保存 + 推送\n      await this.$request.post('/chatInfo/add', msg);\n      this.socket?.send(JSON.stringify(msg));\n    },\n    /* WebSocket 连接 */\n    initSocket() {\n      const url = `${process.env.VUE_APP_WS}/chatServer/${this.user.id}`;\n      this.socket = new WebSocket(url);\n      this.socket.onmessage = ({\n        data\n      }) => {\n        const msg = JSON.parse(data || '{}');\n        if (msg.sendId === this.currentChatUserId) {\n          this.messageList.push(msg);\n          this.$nextTick(this.scrollBottom);\n        } else {\n          const g = this.chatGroupList.find(v => v.chatUserId === msg.sendId);\n          if (g) g.chatNum = (g.chatNum || 0) + 1;\n        }\n      };\n      // 心跳\n      this.heartbeat = setInterval(() => {\n        this.socket.readyState === 1 && this.socket.send('ping');\n      }, 30000);\n    },\n    /* ----------- 工具 ----------- */\n    scrollBottom() {\n      const box = this.$refs.msgBox;\n      box && (box.scrollTop = box.scrollHeight);\n    }\n  }\n};","map":{"version":3,"names":["name","data","chatGroupList","currentChatUserId","currentChatName","currentChatAvatar","messageList","text","socket","user","JSON","parse","localStorage","getItem","heartbeat","created","initSocket","loadGroup","then","id","Number","$route","query","chatUserId","initChat","beforeDestroy","clearInterval","close","methods","res","$request","get","selectChat","g","$router","replace","chatNum","target","find","v","chatUserName","chatUserAvatar","params","put","$nextTick","scrollBottom","handleKeydown","e","key","ctrlKey","preventDefault","send","content","trim","msg","sendId","sendAvatar","avatar","push","Date","now","post","stringify","url","process","env","VUE_APP_WS","WebSocket","onmessage","setInterval","readyState","box","$refs","msgBox","scrollTop","scrollHeight"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <!-- 左侧会话列表 -->\n    <aside class=\"sidebar\">\n      <header class=\"sidebar-title\">会话列表</header>\n      <ul class=\"group-list\">\n        <li\n          v-for=\"g in chatGroupList\"\n          :key=\"g.id\"\n          :class=\"{ active: currentChatUserId === g.chatUserId }\"\n          @click=\"selectChat(g)\"\n        >\n          <img :src=\"g.chatUserAvatar\" class=\"avatar\" />\n          <span class=\"name ellipsis\">{{ g.chatUserName }}</span>\n          <sup v-if=\"g.chatNum\" class=\"badge\">{{ g.chatNum }}</sup>\n        </li>\n      </ul>\n    </aside>\n\n    <!-- 右侧聊天区域 -->\n    <section class=\"chat-panel\" v-if=\"currentChatUserId\">\n      <header class=\"chat-header\">\n        <img :src=\"currentChatAvatar\" class=\"avatar\" />\n        <span class=\"name\">{{ currentChatName }}</span>\n      </header>\n\n      <!-- 消息列表 -->\n      <main class=\"msg-box\" ref=\"msgBox\">\n        <template v-if=\"messageList.length\">\n          <div\n            v-for=\"m in messageList\"\n            :key=\"m.id\"\n            :class=\"['msg-item', m.sendId === user.id ? 'mine' : 'other']\"\n          >\n            <img :src=\"m.sendAvatar\" class=\"avatar\" />\n            <div class=\"bubble\" v-html=\"m.content\"></div>\n          </div>\n        </template>\n        <p v-else class=\"empty\">暂无聊天记录~</p>\n      </main>\n\n      <!-- 输入区 -->\n      <footer class=\"input-area\">\n        <el-input\n          v-model=\"text\"\n          type=\"textarea\"\n          :autosize=\"{ minRows: 1, maxRows: 4 }\"\n          placeholder=\"回车发送，Ctrl+Enter 换行\"\n          @keydown.native=\"handleKeydown\"\n        />\n        <el-button type=\"primary\" size=\"small\" @click=\"send\">发送</el-button>\n      </footer>\n    </section>\n\n    <!-- 占位：未选中会话 -->\n    <section class=\"chat-panel placeholder\" v-else>\n      <p class=\"empty\">请选择联系人开始聊天</p>\n    </section>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      chatGroupList: [],\n      currentChatUserId: null,\n      currentChatName: '',\n      currentChatAvatar: '',\n      messageList: [],\n      text: '',\n      socket: null,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      heartbeat: null\n    }\n  },\n  created() {\n    this.initSocket()\n    this.loadGroup().then(() => {\n      const id = Number(this.$route.query.chatUserId)\n      if (id) this.initChat(id)\n    })\n  },\n  beforeDestroy() {\n    clearInterval(this.heartbeat)\n    this.socket && this.socket.close()\n  },\n  methods: {\n    /* ----------- 会话列表 ----------- */\n    async loadGroup() {\n      const res = await this.$request.get('/chatGroup/selectUserGroup')\n      this.chatGroupList = res.data || []\n    },\n    selectChat(g) {\n      if (this.currentChatUserId === g.chatUserId) return\n      // URL 同步\n      this.$router.replace({ query: { chatUserId: g.chatUserId } })\n      this.initChat(g.chatUserId)\n      g.chatNum = 0 // 清未读\n    },\n    async initChat(chatUserId) {\n      const target = this.chatGroupList.find(v => v.chatUserId === chatUserId)\n      if (!target) return\n      this.currentChatUserId = chatUserId\n      this.currentChatName = target.chatUserName\n      this.currentChatAvatar = target.chatUserAvatar\n      // 拉历史\n      const res = await this.$request.get('/chatInfo/selectUserChat', { params: { chatUserId } })\n      this.messageList = res.data || []\n      await this.$request.put('/chatInfo/updateRead/' + chatUserId)\n      this.$nextTick(this.scrollBottom)\n    },\n\n    /* ----------- 发送 / 接收 ----------- */\n    handleKeydown(e) {\n      if (e.key === 'Enter' && !e.ctrlKey) {\n        e.preventDefault()\n        this.send()\n      }\n    },\n    async send() {\n      const content = this.text.trim()\n      if (!content) return\n      const msg = {\n        sendId: this.user.id,\n        sendAvatar: this.user.avatar,\n        chatUserId: this.currentChatUserId,\n        content\n      }\n      // 本地渲染\n      this.messageList.push({ ...msg, id: Date.now() })\n      this.text = ''\n      this.$nextTick(this.scrollBottom)\n      // 保存 + 推送\n      await this.$request.post('/chatInfo/add', msg)\n      this.socket?.send(JSON.stringify(msg))\n    },\n    /* WebSocket 连接 */\n    initSocket() {\n      const url = `${process.env.VUE_APP_WS}/chatServer/${this.user.id}`\n      this.socket = new WebSocket(url)\n      this.socket.onmessage = ({ data }) => {\n        const msg = JSON.parse(data || '{}')\n        if (msg.sendId === this.currentChatUserId) {\n          this.messageList.push(msg)\n          this.$nextTick(this.scrollBottom)\n        } else {\n          const g = this.chatGroupList.find(v => v.chatUserId === msg.sendId)\n          if (g) g.chatNum = (g.chatNum || 0) + 1\n        }\n      }\n      // 心跳\n      this.heartbeat = setInterval(() => {\n        this.socket.readyState === 1 && this.socket.send('ping')\n      }, 30000)\n    },\n\n    /* ----------- 工具 ----------- */\n    scrollBottom() {\n      const box = this.$refs.msgBox\n      box && (box.scrollTop = box.scrollHeight)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  height: calc(100vh - 70px);\n  padding: 20px;\n  box-sizing: border-box;\n}\n.sidebar {\n  width: 260px;\n  border-right: 1px solid #eaeaea;\n  display: flex;\n  flex-direction: column;\n}\n.sidebar-title {\n  padding: 12px 18px;\n  font-weight: 600;\n  border-bottom: 1px solid #eaeaea;\n}\n.group-list {\n  flex: 1;\n  overflow-y: auto;\n}\n.group-list li {\n  display: flex;\n  align-items: center;\n  padding: 10px 18px;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n.group-list li.active,\n.group-list li:hover {\n  background: #ecf5ff;\n}\n.group-list .avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n.badge {\n  background: #ff3c3c;\n  color: #fff;\n  border-radius: 10px;\n  padding: 0 6px;\n  font-size: 12px;\n}\n.chat-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  margin-left: 20px;\n  background: #fff;\n  border-radius: 6px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\n}\n.chat-header {\n  padding: 14px 20px;\n  border-bottom: 1px solid #f0f0f0;\n  display: flex;\n  align-items: center;\n}\n.chat-header .avatar {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n.chat-header .name {\n  font-weight: 600;\n  font-size: 16px;\n}\n.msg-box {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px 20px;\n}\n.msg-item {\n  display: flex;\n  margin-bottom: 12px;\n}\n.msg-item.mine {\n  flex-direction: row-reverse;\n}\n.msg-item .avatar {\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  margin: 0 8px;\n}\n.bubble {\n  max-width: 60%;\n  padding: 10px 14px;\n  border-radius: 4px;\n  background: #f5f7fa;\n  word-break: break-all;\n}\n.msg-item.mine .bubble {\n  background: #409eff;\n  color: #fff;\n}\n.input-area {\n  padding: 10px 20px;\n  border-top: 1px solid #f0f0f0;\n  display: flex;\n  gap: 10px;\n}\n.input-area .el-input {\n  flex: 1;\n}\n.placeholder {\n  align-items: center;\n  justify-content: center;\n}\n.empty {\n  color: #999;\n  text-align: center;\n}\n.ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}