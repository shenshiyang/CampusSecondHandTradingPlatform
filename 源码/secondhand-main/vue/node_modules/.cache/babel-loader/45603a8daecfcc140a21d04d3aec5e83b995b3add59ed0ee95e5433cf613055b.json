{"ast":null,"code":"export default {\n  name: \"Goods\",\n  data() {\n    return {\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      name: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {},\n      ids: [],\n      content: '',\n      fromVisible1: false\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    preview(content) {\n      this.content = content;\n      this.fromVisible1 = true;\n    },\n    changeStatus(row, status) {\n      this.$confirm('您确定操作吗？', '确认操作', {\n        type: \"warning\"\n      }).then(response => {\n        this.form = JSON.parse(JSON.stringify(row)); // 给form对象赋值  注意要深拷贝数据\n        this.form.status = status;\n        this.$request.put('/goods/update', this.form).then(res => {\n          if (res.code === '200') {\n            // 表示成功保存\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(err => {});\n    },\n    handleAdd() {\n      // 新增数据\n      this.form = {}; // 新增数据的时候清空数据\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    handleEdit(row) {\n      // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row)); // 给form对象赋值  注意要深拷贝数据\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/goods/update' : '/goods/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('保存成功');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n\n    del(id) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/goods/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id);\n    },\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/goods/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // 分页查询\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/goods/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          name: this.name\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          this.tableData = res.data?.list;\n          this.total = res.data?.total;\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    reset() {\n      this.name = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","ids","content","fromVisible1","created","load","methods","preview","changeStatus","row","status","$confirm","type","then","response","stringify","$request","put","res","code","$message","success","error","msg","catch","err","handleAdd","handleEdit","save","$refs","formRef","validate","valid","url","id","method","del","delete","handleSelectionChange","rows","map","v","delBatch","length","warning","get","params","list","reset","handleCurrentChange"],"sources":["src/views/manager/Goods.vue"],"sourcesContent":["<template>\n  <div class=\"goods-container\">\n    <!-- 搜索栏 -->\n    <div class=\"search-wrapper\">\n      <el-input \n        placeholder=\"请输入关键字查询\" \n        v-model=\"name\"\n        prefix-icon=\"el-icon-search\"\n        class=\"search-input\">\n      </el-input>\n      <el-button type=\"primary\" plain @click=\"load(1)\">查询</el-button>\n      <el-button type=\"warning\" plain @click=\"reset\">重置</el-button>\n    </div>\n\n    <!-- 操作栏 -->\n    <div class=\"operation-wrapper\">\n      <el-button type=\"danger\" plain icon=\"el-icon-delete\" @click=\"delBatch\">批量删除</el-button>\n    </div>\n\n    <!-- 表格区域 -->\n    <div class=\"table-wrapper\">\n      <el-table \n        :data=\"tableData\" \n        stripe\n        border\n        @selection-change=\"handleSelectionChange\"\n        class=\"goods-table\">\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"id\" label=\"序号\" width=\"70\" align=\"center\" sortable></el-table-column>\n        <el-table-column prop=\"name\" label=\"名称\" show-overflow-tooltip></el-table-column>\n        <el-table-column prop=\"price\" label=\"价格\"></el-table-column>\n        <el-table-column prop=\"content\" label=\"详情\" width=\"100\">\n          <template v-slot=\"scope\">\n            <el-button @click=\"preview(scope.row.content)\">显示详情</el-button>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"address\" label=\"发货地址\"></el-table-column>\n        <el-table-column prop=\"img\" label=\"图片\">\n          <template v-slot=\"scope\">\n            <el-image v-if=\"scope.row.img\" style=\"width: 50px\" :src=\"scope.row.img\" :preview-src-list=\"[scope.row.img]\"></el-image>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"date\" label=\"上架日期\"></el-table-column>\n        <el-table-column prop=\"status\" label=\"审核状态\">\n          <template v-slot=\"scope\">\n            <el-tag type=\"info\" v-if=\"scope.row.status === '待审核'\">待审核</el-tag>\n            <el-tag type=\"success\" v-if=\"scope.row.status === '通过'\">通过</el-tag>\n            <el-tag type=\"danger\" v-if=\"scope.row.status === '拒绝'\">拒绝</el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"category\" label=\"分类\"></el-table-column>\n        <el-table-column prop=\"userId\" label=\"所属用户ID\"></el-table-column>\n        <el-table-column prop=\"userName\" label=\"所属用户\"></el-table-column>\n        <el-table-column prop=\"saleStatus\" label=\"上架状态\"></el-table-column>\n        <el-table-column prop=\"readCount\" label=\"浏览量\"></el-table-column>\n        <el-table-column label=\"操作\" align=\"center\" width=\"240\">\n          <template v-slot=\"scope\">\n            <el-button size=\"mini\" type=\"success\" plain @click=\"changeStatus(scope.row, '通过')\">通过</el-button>\n            <el-button size=\"mini\" type=\"danger\" plain @click=\"changeStatus(scope.row, '拒绝')\">拒绝</el-button>\n            <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.id)\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页器 -->\n      <div class=\"pagination-wrapper\">\n        <el-pagination\n            background\n            @current-change=\"handleCurrentChange\"\n            :current-page=\"pageNum\"\n            :page-sizes=\"[5, 10, 20]\"\n            :page-size=\"pageSize\"\n            layout=\"total, prev, pager, next\"\n            :total=\"total\">\n        </el-pagination>\n      </div>\n    </div>\n\n    <!-- 详情弹窗 -->\n    <el-dialog \n      title=\"商品详情\" \n      :visible.sync=\"fromVisible1\" \n      width=\"60%\" \n      :close-on-click-modal=\"false\" \n      destroy-on-close\n      class=\"detail-dialog\">\n      <div v-html=\"content\" class=\"content-wrapper\"></div>\n    </el-dialog>\n\n    <!-- 编辑弹窗 -->\n    <el-dialog \n      title=\"二手商品\" \n      :visible.sync=\"fromVisible\" \n      width=\"40%\" \n      :close-on-click-modal=\"false\" \n      destroy-on-close\n      class=\"edit-dialog\">\n      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">\n        <el-form-item label=\"名称\" prop=\"name\">\n          <el-input v-model=\"form.name\" placeholder=\"名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"价格\" prop=\"price\">\n          <el-input v-model=\"form.price\" placeholder=\"价格\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"详情\" prop=\"content\">\n          <el-input v-model=\"form.content\" placeholder=\"详情\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"发货地址\" prop=\"address\">\n          <el-input v-model=\"form.address\" placeholder=\"发货地址\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"图片\" prop=\"img\">\n          <el-input v-model=\"form.img\" placeholder=\"图片\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"上架日期\" prop=\"date\">\n          <el-input v-model=\"form.date\" placeholder=\"上架日期\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"审核状态\" prop=\"status\">\n          <el-input v-model=\"form.status\" placeholder=\"审核状态\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"分类\" prop=\"category\">\n          <el-input v-model=\"form.category\" placeholder=\"分类\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"所属用户ID\" prop=\"userId\">\n          <el-input v-model=\"form.userId\" placeholder=\"所属用户ID\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"上架状态\" prop=\"saleStatus\">\n          <el-input v-model=\"form.saleStatus\" placeholder=\"上架状态\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"浏览量\" prop=\"readCount\">\n          <el-input v-model=\"form.readCount\" placeholder=\"浏览量\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"fromVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"Goods\",\n  data() {\n    return {\n      tableData: [],  // 所有的数据\n      pageNum: 1,   // 当前的页码\n      pageSize: 10,  // 每页显示的个数\n      total: 0,\n      name: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n      },\n      ids: [],\n      content: '',\n      fromVisible1: false\n    }\n  },\n  created() {\n    this.load(1)\n  },\n  methods: {\n    preview(content) {\n      this.content = content\n      this.fromVisible1 = true\n    },\n    changeStatus(row, status) {\n      this.$confirm('您确定操作吗？', '确认操作', {type: \"warning\"}).then(response => {\n        this.form = JSON.parse(JSON.stringify(row))  // 给form对象赋值  注意要深拷贝数据\n        this.form.status = status\n        this.$request.put('/goods/update', this.form).then(res => {\n          if (res.code === '200') {  // 表示成功保存\n            this.$message.success('操作成功')\n            this.load(1)\n          } else {\n            this.$message.error(res.msg)  // 弹出错误的信息\n          }\n        })\n      }).catch(err => {})\n    },\n    handleAdd() {   // 新增数据\n      this.form = {}  // 新增数据的时候清空数据\n      this.fromVisible = true   // 打开弹窗\n    },\n    handleEdit(row) {   // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row))  // 给form对象赋值  注意要深拷贝数据\n      this.fromVisible = true   // 打开弹窗\n    },\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate((valid) => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/goods/update' : '/goods/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {  // 表示成功保存\n              this.$message.success('保存成功')\n              this.load(1)\n              this.fromVisible = false\n            } else {\n              this.$message.error(res.msg)  // 弹出错误的信息\n            }\n          })\n        }\n      })\n    },\n    del(id) {   // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\n        this.$request.delete('/goods/delete/' + id).then(res => {\n          if (res.code === '200') {   // 表示操作成功\n            this.$message.success('操作成功')\n            this.load(1)\n          } else {\n            this.$message.error(res.msg)  // 弹出错误的信息\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id)\n    },\n    delBatch() {   // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据')\n        return\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\n        this.$request.delete('/goods/delete/batch', {data: this.ids}).then(res => {\n          if (res.code === '200') {   // 表示操作成功\n            this.$message.success('操作成功')\n            this.load(1)\n          } else {\n            this.$message.error(res.msg)  // 弹出错误的信息\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    load(pageNum) {  // 分页查询\n      if (pageNum) this.pageNum = pageNum\n      this.$request.get('/goods/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          name: this.name,\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          this.tableData = res.data?.list\n          this.total = res.data?.total\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n    },\n    reset() {\n      this.name = null\n      this.load(1)\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum)\n    },\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.goods-container {\n  padding: 20px;\n  background: #f5f7fa;\n  min-height: calc(100vh - 60px);\n\n  .search-wrapper {\n    background: #fff;\n    padding: 20px;\n    border-radius: 4px;\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n    margin-bottom: 20px;\n\n    .search-input {\n      width: 200px;\n      margin-right: 10px;\n    }\n  }\n\n  .operation-wrapper {\n    margin-bottom: 20px;\n  }\n\n  .table-wrapper {\n    background: #fff;\n    padding: 20px;\n    border-radius: 4px;\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n\n    .goods-table {\n      margin-bottom: 20px;\n    }\n  }\n\n  .pagination-wrapper {\n    text-align: center;\n    padding-top: 20px;\n  }\n}\n\n.detail-dialog {\n  .content-wrapper {\n    padding: 20px;\n    line-height: 1.8;\n    color: #606266;\n  }\n}\n\n.edit-dialog {\n  .el-form {\n    max-height: 60vh;\n    overflow-y: auto;\n    padding: 0 20px;\n  }\n}\n\n// 美化表格中的图片\n.el-image {\n  border-radius: 4px;\n  transition: transform 0.3s;\n  &:hover {\n    transform: scale(1.1);\n  }\n}\n\n// 美化状态标签\n.el-tag {\n  padding: 0 12px;\n  height: 28px;\n  line-height: 26px;\n}\n\n// 美化按钮\n.el-button {\n  padding: 8px 20px;\n  &.el-button--mini {\n    padding: 6px 12px;\n  }\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}