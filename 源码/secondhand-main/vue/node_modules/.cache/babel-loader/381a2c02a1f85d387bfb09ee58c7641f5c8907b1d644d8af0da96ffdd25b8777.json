{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null\n    };\n  },\n  mounted() {\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n    this.connectWebSocket();\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data;\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    connectWebSocket() {\n      // 关闭之前的连接\n      if (this.ws) {\n        this.ws.close();\n      }\n\n      // 创建WebSocket连接\n      const wsUrl = `ws://${window.location.hostname}:${window.location.port}/chatServer/${this.user.id}`;\n      this.ws = new WebSocket(wsUrl);\n\n      // 监听消息\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          // 如果是当前聊天对象的消息，直接添加到聊天列表\n          if (data.userId === this.active) {\n            this.chatList.push(data);\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n            // 标记为已读\n            this.$request.put(`/chatInfo/updateRead/${data.userId}`);\n          }\n          // 刷新用户列表以更新未读消息数\n          this.loadUserList();\n        } catch (e) {\n          console.error('解析WebSocket消息失败:', e);\n        }\n      };\n\n      // 监听连接关闭\n      this.ws.onclose = () => {\n        // 连接关闭后1秒尝试重连\n        setTimeout(() => {\n          this.connectWebSocket();\n        }, 1000);\n      };\n\n      // 监听错误\n      this.ws.onerror = () => {\n        this.ws.close();\n      };\n    },\n    send() {\n      if (!this.content.trim()) return;\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content\n      };\n      this.$request.post('/chatInfo/add', msg).then(res => {\n        if (res.code === '200') {\n          this.chatList.push(msg);\n          // 发送WebSocket消息\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n              ...msg,\n              userAvatar: this.user.avatar,\n              userName: this.user.name\n            }));\n          }\n          this.content = '';\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","userList","chatList","chatTitle","active","content","activeUserAvatar","ws","mounted","loadUserList","then","toUserId","$route","query","target","find","u","chatUserId","changeChatUser","$request","post","userId","id","added","connectWebSocket","beforeDestroy","close","methods","get","res","code","item","chatUserName","chatUserAvatar","put","loadChatRecord","$nextTick","box","$refs","chatBox","scrollTop","scrollHeight","wsUrl","window","location","hostname","port","WebSocket","onmessage","event","push","e","console","error","onclose","setTimeout","onerror","send","trim","msg","text","readyState","OPEN","stringify","userAvatar","avatar","userName","name"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-page\">\n    <div class=\"chat-user-list\">\n      <div\n        v-for=\"item in userList\"\n        :key=\"item.chatUserId\"\n        :class=\"['chat-user', item.chatUserId === active ? 'active' : '']\"\n        @click=\"changeChatUser(item)\">\n        <img :src=\"item.chatUserAvatar\" alt=\"\">\n        <span>{{ item.chatUserName }}</span>\n      </div>\n    </div>\n\n    <div class=\"chat-main\">\n      <div class=\"chat-title\">{{ chatTitle }}</div>\n\n      <div class=\"chat-box\" ref=\"chatBox\">\n        <div\n          v-for=\"(item, index) in chatList\"\n          :key=\"index\"\n          :class=\"['msg-box', item.userId === user.id ? 'right' : 'left']\">\n          <img\n            class=\"avatar\"\n            :src=\"item.userId === user.id ? user.avatar : activeUserAvatar\"\n            alt=\"头像\">\n          <div class=\"msg-content\">{{ item.text }}</div>\n        </div>\n      </div>\n\n      <div class=\"chat-input\">\n        <el-input v-model=\"content\" placeholder=\"请输入聊天内容\" @keyup.enter.native=\"send\" />\n        <el-button type=\"primary\" @click=\"send\">发送</el-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      userList: [],\n      chatList: [],\n      chatTitle: '',\n      active: null,\n      content: '',\n      activeUserAvatar: '',\n      ws: null\n    }\n  },\n  mounted() {\n    this.loadUserList().then(() => {\n      const toUserId = this.$route.query.toUserId;\n      if (toUserId) {\n        const target = this.userList.find(u => u.chatUserId == toUserId);\n        if (target) {\n          this.changeChatUser(target);\n        } else {\n          this.$request.post('/chatGroup/add', {\n            userId: this.user.id,\n            chatUserId: toUserId\n          }).then(() => {\n            this.loadUserList().then(() => {\n              const added = this.userList.find(u => u.chatUserId == toUserId);\n              if (added) this.changeChatUser(added);\n            });\n          });\n        }\n      }\n    });\n    this.connectWebSocket();\n  },\n  beforeDestroy() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  },\n  methods: {\n    loadUserList() {\n      return this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        if (res.code === '200') {\n          this.userList = res.data;\n        }\n      });\n    },\n    changeChatUser(item) {\n      this.chatTitle = item.chatUserName || '对方';\n      this.active = item.chatUserId;\n      this.activeUserAvatar = item.chatUserAvatar;\n      this.$request.put(`/chatInfo/updateRead/${item.chatUserId}`);\n      this.loadChatRecord();\n    },\n    loadChatRecord() {\n      this.$request.get(`/chatInfo/selectUserChat/${this.active}`).then(res => {\n        if (res.code === '200') {\n          this.chatList = res.data;\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    },\n    connectWebSocket() {\n      // 关闭之前的连接\n      if (this.ws) {\n        this.ws.close();\n      }\n      \n      // 创建WebSocket连接\n      const wsUrl = `ws://${window.location.hostname}:${window.location.port}/chatServer/${this.user.id}`;\n      this.ws = new WebSocket(wsUrl);\n      \n      // 监听消息\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          // 如果是当前聊天对象的消息，直接添加到聊天列表\n          if (data.userId === this.active) {\n            this.chatList.push(data);\n            this.$nextTick(() => {\n              const box = this.$refs.chatBox;\n              if (box) box.scrollTop = box.scrollHeight;\n            });\n            // 标记为已读\n            this.$request.put(`/chatInfo/updateRead/${data.userId}`);\n          }\n          // 刷新用户列表以更新未读消息数\n          this.loadUserList();\n        } catch (e) {\n          console.error('解析WebSocket消息失败:', e);\n        }\n      };\n      \n      // 监听连接关闭\n      this.ws.onclose = () => {\n        // 连接关闭后1秒尝试重连\n        setTimeout(() => {\n          this.connectWebSocket();\n        }, 1000);\n      };\n      \n      // 监听错误\n      this.ws.onerror = () => {\n        this.ws.close();\n      };\n    },\n    send() {\n      if (!this.content.trim()) return;\n      const msg = {\n        userId: this.user.id,\n        chatUserId: this.active,\n        text: this.content\n      };\n      this.$request.post('/chatInfo/add', msg).then(res => {\n        if (res.code === '200') {\n          this.chatList.push(msg);\n          // 发送WebSocket消息\n          if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n              ...msg,\n              userAvatar: this.user.avatar,\n              userName: this.user.name\n            }));\n          }\n          this.content = '';\n          this.$nextTick(() => {\n            const box = this.$refs.chatBox;\n            if (box) box.scrollTop = box.scrollHeight;\n          });\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  height: 85vh;\n  background: #fff;\n  box-shadow: 0 0 6px #ddd;\n  margin: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n}\n.chat-user-list {\n  width: 220px;\n  border-right: 1px solid #eee;\n  overflow-y: auto;\n}\n.chat-user {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n}\n.chat-user:hover,\n.chat-user.active {\n  background-color: #f0f7ff;\n}\n.chat-user img {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  margin-right: 8px;\n}\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n.chat-title {\n  height: 50px;\n  line-height: 50px;\n  padding-left: 20px;\n  border-bottom: 1px solid #eee;\n  font-weight: bold;\n}\n.chat-box {\n  flex: 1;\n  padding: 15px;\n  overflow-y: auto;\n}\n.chat-input {\n  display: flex;\n  padding: 10px;\n  border-top: 1px solid #eee;\n}\n.chat-input .el-input {\n  flex: 1;\n  margin-right: 10px;\n}\n.msg-box {\n  display: flex;\n  align-items: flex-end;\n  margin-bottom: 10px;\n}\n.msg-box.left {\n  flex-direction: row;\n}\n.msg-box.right {\n  flex-direction: row-reverse;\n}\n.avatar {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  margin: 0 10px;\n}\n.msg-content {\n  background: #e1f3ff;\n  padding: 8px 12px;\n  border-radius: 6px;\n  max-width: 60%;\n  word-wrap: break-word;\n  word-break: break-all;\n}\n.msg-box.right .msg-content {\n  background: #a0e86f;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}